@gf4ed_init
' OPENW #1,140,80,340,220,&X1
DIM ascii$(256)
' ascii$(1)="OPENW i&(1),a&,b&,c&,d&,e&,f&,1,1,1,1,1,1,1,1,1,1,1,1"
' ascii$(2)="PRINT "
ascii$(1)="REPEAT"
ascii$(2)="INC i#"
ascii$(3)="OUT 2,ADD(DIV(INT(i#),10),48),ADD(MOD(INT(i#),10),48),13,10"
ascii$(4)="UNTIL i#=29"
@gf4pt_tokenizer("","E:\HELL_OUT.GFA",4,ascii$())
' CLOSEW #1
@gf4ed_exit
' @sortiere_tokens
> PROCEDURE gf4ed_init
  DIM line_point%(128),alloc_map!(128)
  DIM var$(16,1024),p%(38)
  DIM tok$(512),tok&(512),toklen|(512)
  DIM fnk$(256),fnk&(256),fnklen|(256)
  DIM fnk2$(256),fnk2&(256),fnk2len|(256)
  DIM var|(16),var&(16),len%(16),anz&(16),f|(16)
  CLS
  RESTORE var_length
  @gf4pt_readlength(var|())
  '
  RESTORE var_2field
  @gf4pt_readfield(f|())
  '
  @gf4tp_stoken
  RESTORE cmd_stoken
  @gf4tp_readdata(tok$(),tok&(),toklen|())
  @gf4tp_readdata(fnk$(),fnk&(),fnklen|())
  @gf4tp_readdata(fnk2$(),fnk2&(),fnk2len|())
  '
var_length:
  DATA 8,6,4,2,6,6,6,6,2,2,0,0,6,6,0,0
  '    # $ % ! #($(%(!(& | : P &(|(F F$
  '    1 2 3 4 5 6 7 8 910111213141516
  '
var_2field:
  DATA 1,5,2,6,3,7,4,8,9,13,10,14
  '    # #($ $(% %(! !(& &( |  |(
  '
  ' ( #=0 $=1 %=2 !=3 #()=4 $()=5 %()=6 !()=7 &=8 |=9 &()=12 |()=13 )
RETURN
> PROCEDURE gf4pt_output(string$)
  PRINT string$
RETURN
> PROCEDURE gf4pt_debug(string$)
  OPEN "O",#9,"VID:"
  PRINT "pDEBUGq ";
  PRINT #9,string$;
  PRINT
  CLOSE #9
RETURN
> PROCEDURE gf4pt_tokenizer(file$,outfile$,lines%,VAR lines$())
  LOCAL ll%,adr%,len%
  @gf4pt_debug("003 gf4pt_tokenizer Tokenvorgang-Start")
  DIM token$(SUCC(lines%))
  ll%=4                                         ! Listing-LÑnge (+ TERM-Teile)
  @gf4pt_output("Tokenisiere Zeilen")
  FOR line%=1 TO lines%
    EXIT IF lines$(line%)=""
    token$(line%)=@gf4tp_tok$(lines$(line%))
    @gf4pt_debug("002 gf4pt_tokenizer "+token$(line%))
    ADD ll%,ADD(LEN(token$(line%)),2)           ! LÑnge+LÑngenbyte
  NEXT line%
  token$(SUCC(lines%))=MKI$(180)                ! Aber bitte mit Sahne
  '                                             | (d.h. bei Nullzeile
  '                                             | Terminatorzeile erzeugen)
  @gf4pt_output("Erstelle Haeder")
  adr%=@gf4pt_makevar(ll%,len%)
  OPEN "O",#2,outfile$
  @gf4pt_whaeder(2,adr%,len%)
  @gf4pt_output("Schreibe Listing")
  FOR line%=1 TO SUCC(lines%)
    OUT& #2,ADD(LEN(token$(line%)),2)
    PRINT #2,token$(line%);
  NEXT line%
  CLOSE #2
  @gf4pt_output("Fertig")
  @gf4pt_debug("004 gf4pt_tokenizer  Unreserve-Start")
  ERASE token$()
  ~MFREE(adr%)
  @gf4pt_debug("005 gf4pt_tokenizer  Unreserve-Ende")
  @gf4pt_debug("003 gf4pt_tokenizer Tokenvorgang-Ende")
RETURN
> PROCEDURE gf4tp_readdata(VAR data$(),token&(),len|())
  LOCAL token&,i&
  CLR i&
  REPEAT
    INC i&
    READ token&
    IF token&<>-1
      token&(i&)=token&
      READ data$(i&)
      len|(i&)=LEN(data$(i&))
    ENDIF
  UNTIL token&=-1
RETURN
> PROCEDURE gf4pt_readlength(VAR data|())
  LOCAL i&
  FOR i&=1 TO 16
    READ data|(i&)
  NEXT i&
RETURN
> PROCEDURE gf4pt_readfield(VAR data|())
  LOCAL i&,v|,f|
  FOR i&=1 TO 6
    READ v|,f|                          ! Var-Type + entsprechender Feld-Type
    f|(v|)=f|
  NEXT i&
RETURN
'
> PROCEDURE gf4ed_insert
RETURN
> FUNCTION gf4tp_tok$(ascii$)
  LOCAL cmd&,a&,a$,i&,token$,loop_exit!,pos&,char$,var$,number#,type&
  LOCAL var&
  ' ++SYM
  tok_apost|=222                        ! Apostroph (")
  tok_case&=224                         ! Command-Token: CASE
  tok_4sconst|=198                      ! CASE Stringkonstante (ohne Filler)
  tok_4dconst|=200                      ! CASE Dezimalkonstante
  tok_4hconst|=202                      ! CASE Hexkonstante
  tok_4oconst|=204                      ! CASE Oktalkonstante
  tok_4bconst|=206                      ! CASE BinÑrkonstante
  tok_oconst|=216                       ! Oktalkonstante
  tok_bconst|=218                       ! BinÑrkonstante
  tok_hconst|=220                       ! Hexkonstante
  tok_dconst|=222                       ! Dezimalkonstante
  ' --SYM
  ascii$=UPPER$(ascii$)                 ! Not CaSeSeNsItIv
  FOR i&=1 TO max_token&
    IF LEFT$(ascii$,toklen|(i&))=tok$(i&)
      @gf4pt_debug("056 gf4pt_tok$() Token ist "+tok$(i&)+", links "+LEFT$(ascii$,toklen|(i&)))
      token$=MKI$(tok&(i&))
      cmd&=tok&(i&)
      pos&=SUCC(toklen|(i&))
      EXIT IF TRUE
      ' ELSE IF i&>max_token&
      '  SYNTAX: UNKNOWN COMMAND oDeR PrOcEdUrAuFrUf (WeNn kEiNe UnGÅLtIgEn
      '  ZeIcHeN) OdEr VaRiAbLeNzUwEiSuNg
    ENDIF
  NEXT i&
  @gf4pt_addspecial(cmd&,pos&,ascii$,token$)
  FOR i&=pos& TO LEN(ascii$)
    char$=MID$(ascii$,i&,1)
    IF char$=""
    ELSE IF char$=CHR$(34)
      a$=MID$(ascii$,SUCC(i&),SUB(INSTR(SUCC(a&),ascii$,CHR$(34)),i&))
      IF cmd&=tok_case&
        IF LEN(a$)<5                    ! -!SC
          @gf4pt_put4konst(i&,number%,tok_4sconst|,token$)
        ELSE                            ! --!SC
          @gf4pt_output("Syntax Error at "+STR$(i&))
        ENDIF                           ! --!SC
      ELSE
        token$=token$+CHR$(tok_apost|)+CHR$(LEN(a$))+a$
      ENDIF
    ELSE IF char$="&"
      char$=MID$(ascii$,SUCC(i&),1)
      ADD i&,2
      IF char$=""
      ELSE IF char$="X"                                         ! BinÑr
        @gf4pt_getnum("10",ascii$,i&,number#)
        IF cmd&=tok_case&
          @gf4pt_put4konst(i&,number#,tok_4bconst|,token$)
        ELSE
          @gf4pt_putkonst(i&,number#,tok_bconst|,token$)
        ENDIF
      ELSE IF char$="H"                                         ! Hex
        @gf4pt_getnum("1234567890ABCDEF",ascii$,i&,number#)
        IF cmd&=tok_case&
          @gf4pt_put4konst(i&,number#,tok_4hconst|,token$)
        ELSE
          @gf4pt_putkonst(i&,number#,tok_hconst|,token$)
        ENDIF
      ELSE IF char$="O"                                         ! Oktal
        @gf4pt_getnum("12345670",ascii$,i&,number#)
        IF cmd&=tok_case& OR TRUE                               ! Immer?
          @gf4pt_put4konst(i&,number#,tok_4oconst|,token$)
        ELSE
          @gf4pt_putkonst(i&,number#,tok_oconst|,token$)
        ENDIF
      ELSE                                                      ! Hex
        DEC i&
        @gf4pt_getnum("1234567890ABCDEF",ascii$,i&,number#)
        IF cmd&=tok_case&
          @gf4pt_put4konst(i&,number#,tok_4hconst|,token$)
        ELSE
          @gf4pt_putkonst(i&,number#,tok_hconst|,token$)
        ENDIF
      ENDIF
    ELSE IF char$="$"                                           ! Hexzahl
      @gf4pt_getnum("1234567890ABCDEF",ascii$,i&,number#)
      IF cmd&=tok_case&
        @gf4pt_put4konst(i&,number#,tok_4hconst|,token$)
      ELSE
        @gf4pt_putkonst(i&,number#,tok_hconst|,token$)
      ENDIF
    ELSE IF char$="%"                                           ! Binzahl
      @gf4pt_getnum("10",ascii$,i&,number#)
      IF cmd&=tok_case&
        @gf4pt_put4konst(i&,number#,tok_4bconst|,token$)
      ELSE
        @gf4pt_putkonst(i&,number#,tok_bconst|,token$)
      ENDIF
    ELSE IF INSTR("1234567890",char$)>0                         ! Zahl
      ' @gf4pt_getnumber(ascii$,i&,number#)
      @gf4pt_getnum("1234567890.E",ascii$,i&,number#)
      IF cmd&=tok_case& !OR TRUE
        @gf4pt_put4konst(i&,number#,tok_4dconst|,token$)
      ELSE
        @gf4pt_putreal(i&,number#,token$)
      ENDIF
    ELSE
      FOR a&=1 TO max_funcs&
        IF fnklen|(a&)>0
          IF MID$(ascii$,i&,fnklen|(a&))=fnk$(a&)
            token$=token$+CHR$(fnk&(a&))
            ADD i&,PRED(fnklen|(a&))
            EXIT IF TRUE
          ENDIF
        ENDIF
      NEXT a&
      IF a&>max_funcs&
        FOR a&=1 TO max_func2&
          IF fnk2len|(a&)>0
            IF MID$(ascii$,i&,fnk2len|(a&))=fnk2$(a&)
              token$=token$+CHR$(208)+CHR$(fnk2&(a&))
              ADD i&,PRED(fnk2len|(a&))
              EXIT IF TRUE
            ENDIF
          ENDIF
        NEXT a&
        IF a&>max_func2&
          IF INSTR("ABCDEFGHIJKLMNOPQRSTUVWXYZ_",char$)>0
            @gf4pt_getstr("ABCDEFGHIJKLMNOPQRSTUVWXYZ_",ascii$,i&,var$)
            var&=@gf4pt_getvar(var$,type&)
            type&=@gf4pt_getsuffix(i&,ascii$,token$)
            @gf4pt_putvar(i&,var$,var&,type&,token$)
          ELSE                                                    ! -!SC
            @gf4pt_output("Syntax Error at "+STR$(i&))            ! -!SC
          ENDIF
        ENDIF
      ENDIF
    ENDIF
  NEXT i&
  token$=token$+CHR$(70)                ! "F"
  IF ODD(LEN(token$))
    token$=token$+CHR$(70)              ! CHR$(0)
  ENDIF
  '
  RETURN token$
ENDFUNC
> PROCEDURE gf4ed_exit
RETURN
'
> FUNCTION gf4pt_getvar(var$,type&)
  LOCAL i&
  FOR i&=1 TO var&(type&)
    EXIT IF var$(type&,i&)=var$
  NEXT i&
  RETURN i&
ENDFUNC
> FUNCTION gf4pt_getsuffix(VAR i&,ascii$,token$)
  LOCAL char$,type&
  ' ++SYM
  default_type|=1                       ! DEFAULT-Typ (Jetzt REAL)
  ' --SYM
  char$=MID$(ascii$,SUCC(i&),1)
  IF char$=""
  ELSE IF char$="#"
    type&=1
  ELSE IF char$="$"
    type&=2
  ELSE IF char$="%"
    type&=3
  ELSE IF char$="!"
    type&=4
  ELSE IF char$="&"
    type&=9
  ELSE IF char$="|"
    type&=10
  ELSE
    type&=default_type|
  ENDIF
  IF char$="#" OR char$="$" OR char$="%" OR char$="!" OR char$="&" OR char$="|"
    INC i&
  ENDIF
  IF MID$(ascii$,SUCC(i&),1)="("                ! Feld?
    type&=f|(type&)
    INC i&
  ENDIF
  RETURN type&
ENDFUNC
> PROCEDURE gf4pt_putvar(i&,var$,var&,type&,VAR token$)
  ' ##BEM i& ist nicht verwendet. nur zur vollstÑndigkeit.
  IF var&>var&(type&)
    INC var&(type&)
    var$(type&,var&)=var$
  ENDIF
  IF var&<256
    token$=token$+CHR$(ADD(223,type&))+CHR$(PRED(var&))
  ELSE
    token$=token$+CHR$(ADD(239,type&))+MKI$(PRED(var&))
  ENDIF
RETURN
'
> PROCEDURE gf4pt_addspecial(VAR cmd&,i&,ascii$,token$)
  LOCAL var$,var&,type&
  ' 124(NEXT),76(FOR),256(LET),640(INC),672(DEC),704(ADD),736(SUB),768(MUL),800(DIV)
  '
  SELECT cmd&
  CASE 76,124,256,640,672,704,736,786,800
    @gf4pt_getstr("ABCDEFGHIJKLMNOPQRSTUVWXYZ_",ascii$,i&,var$)
    var&=@gf4pt_getvar(var$,type&)
    type&=@gf4pt_getsuffix(i&,ascii$,token$)
    '
    SELECT cmd&
    CASE 704,736,786,800                        ! ADD / SUB / MUL / DIV
      IF f|(type&)>0                            ! Normale Variable
        '                                       | (Hat Schwester)
        INC i&
        IF MID$(ascii$,i&,1)<>","               ! --!SC
          @gf4pt_output("Syntax Error at "+STR$(i&))
        ENDIF                                   ! ++!SC
      ENDIF
    CASE 256
      IF f|(type&)>0
        INC i&
        IF MID$(ascii$,i&,1)<>"="               ! --!SC
          @gf4pt_output("Syntax Error at "+STR$(i&))
        ENDIF                                   ! ++!SC
      ENDIF
    ENDSELECT
    '
    SELECT cmd&
    CASE 76,124                                 ! FOR / NEXT
      ADD cmd&,MUL(PRED(type&),12)
    DEFAULT
      ADD cmd&,MUL(PRED(type&),4)
    ENDSELECT
    '
    token$=MKI$(cmd&)
    '
    SELECT cmd&
    CASE 124                                    ! NEXT
      token$=token$+MKL$(0)+MKI$(PRED(var&))
    DEFAULT
      token$=token$+MKI$(PRED(var&))
    ENDSELECT
    '
    INC i&                                      ! Weil hier nicht NEXT folgt
    '                                           ! sondern dies die Ausgangs-
    '                                           ! Position ist.
  CASE 4,12,16,20,32,48,56,60,64,172,176,196,200,204,208,220,224
    token$=token$+MKL$(0)
  ENDSELECT
RETURN
'
> PROCEDURE gf4pt_getstr(map$,VAR ascii$,i&,var$)
  LOCAL char$
  CLR var$
  REPEAT
    var$=var$+char$
    char$=MID$(ascii$,i&,1)
    INC i&
  UNTIL INSTR(map$,char$)=0
  SUB i&,2
RETURN
> PROCEDURE gf4pt_getnum(map$,VAR ascii$,i&,number#)
  LOCAL char$,var$
  REPEAT
    var$=var$+char$
    char$=MID$(ascii$,i&,1)
    INC i&
  UNTIL INSTR(map$,char$)=0
  number#=VAL(var$)
  SUB i&,2
RETURN
'
> PROCEDURE gf4pt_fill(i&,VAR token$)
  IF ODD(LEN(token$))                                       ! 2,4,6,etc
    ' \- auch: MOD(i&,2)=0
    token$=token$+CHR$(0)                                   ! NULL? Oder
    '                                                       | was?
  ENDIF
RETURN
'
> PROCEDURE gf4pt_putkonst(i&,number#,token|,VAR token$)
  IF EVEN(LEN(token$))
    token$=token$+CHR$(PRED(token|))+CHR$(0)+MKD$(number#)
  ELSE
    token$=token$+CHR$(token|)+MKD$(number#)
  ENDIF
RETURN
> PROCEDURE gf4pt_putreal(i&,number#,VAR token$)
  IF EVEN(LEN(token$))
    token$=token$+CHR$(&HDD)+CHR$(0)+MKD$(number#)
  ELSE
    token$=token$+CHR$(&HDF)+MKD$(number#)
  ENDIF
RETURN
'
> PROCEDURE gf4pt_put4konst(i&,number%,token|,VAR token$)
  IF EVEN(LEN(token$))
    token$=token$+CHR$(SUCC(token|))+CHR$(0)+MKL$(number%)
  ELSE
    token$=token$+CHR$(token|)+MKL$(number%)
  ENDIF
RETURN
'
> PROCEDURE gf4pt_getvar_(VAR ascii$,i&,var$)           ! -!TP
  LOCAL char$
  CLR var$      !,char$
  REPEAT
    var$=var$+char$
    char$=MID$(ascii$,i&,1)
    INC i&
  UNTIL INSTR("_.ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.E",char$)=0
  ' SUB i&,2
RETURN
> PROCEDURE gf4pt_getnumber(VAR ascii$,i&,number#)      ! -!TP
  LOCAL char$,var$
  ' CLR char$,var$
  REPEAT
    var$=var$+char$
    char$=MID$(ascii$,i&,1)
    INC i&
  UNTIL INSTR("1234567890.E",char$)=0
  number#=VAL(var$)
  ' SUB i&,2
RETURN
' SNAP: WITHIN IST THE DANCERS
> PROCEDURE gf4tp_token   ! -!TP
cmd_token:
  DATA 0,"DO"
  DATA 4,"LOOP"
  DATA 8,"REPEAT"
  DATA 12,"UNTIL "
  DATA 16,"WHILE "
  DATA 20,"WEND"
  DATA 24,"PROCEDURE "
  DATA 28,"RETURN"
  DATA 32,"IF "
  DATA 36,"ENDIF"
  DATA 40,"FUNCTION "
  DATA 44,"ENDFUNC"
  DATA 48,"SELECT "
  DATA 52,"ENDSELECT"
  DATA 56,"ELSE"
  DATA 60,"DEFAULT"
  DATA 64,"ELSE IF "
  DATA 68,"RETURN "
  DATA 72,"RETURN "
  DATA 76,"FOR "
  DATA 80,"FOR "
  DATA 84,"FOR "
  DATA 88,"FOR "
  DATA 92,"FOR "
  DATA 96,"FOR "
  DATA 100,"FOR "
  DATA 104,"FOR "
  DATA 108,"FOR "
  DATA 112,"FOR "
  DATA 116,"FOR "
  DATA 120,"FOR "
  DATA 124,"NEXT "
  DATA 128,"NEXT "
  DATA 132,"NEXT "
  DATA 136,"NEXT "
  DATA 140,"NEXT "
  DATA 144,"NEXT "
  DATA 148,"NEXT "
  DATA 152,"NEXT "
  DATA 156,"NEXT "
  DATA 160,"NEXT "
  DATA 164,"NEXT "
  DATA 168,"NEXT "
  DATA 172,"EXIT IF "
  DATA 176,"SELECT "
  DATA 180,""
  DATA 184,""
  DATA 188,""
  DATA 192,""
  DATA 196,"DO WHILE "
  DATA 200,"DO UNTIL "
  DATA 204,"LOOP WHILE "
  DATA 208,"LOOP UNTIL "
  DATA 212,"LOCAL "
  DATA 216,"PROCEDURE "
  DATA 220,"EXIT IF "
  DATA 224,"CASE "
  DATA 228,"DEFFN "
  DATA 232,"GOTO "
  DATA 236,"RESTORE "
  DATA 240,""
  DATA 244,"GOSUB "
  DATA 248,"@"
  DATA 252,""
  DATA 256,"LET "
  DATA 260,"LET "
  DATA 264,"LET "
  DATA 268,"LET "
  DATA 272,"LET "
  DATA 276,"LET "
  DATA 280,"LET "
  DATA 284,"LET "
  DATA 288,"LET "
  DATA 292,"LET "
  DATA 296,"LET "
  DATA 300,"LET "
  DATA 304,""
  DATA 308,""
  DATA 312,""
  DATA 316,""
  DATA 320,""
  DATA 324,""
  DATA 328,""
  DATA 332,""
  DATA 336,""
  DATA 340,""
  DATA 344,""
  DATA 348,""
  DATA 352,"PLOT "
  DATA 356,"PSET "
  DATA 360,"ALINE "
  DATA 364,"HLINE "
  DATA 368,"ARECT "
  DATA 372,"APOLY "
  DATA 376,"ACHAR "
  DATA 380,"ACLIP "
  DATA 384,"COLOR "
  DATA 388,"POKE "
  DATA 392,"DPOKE "
  DATA 396,"LPOKE "
  DATA 400,"SPOKE "
  DATA 404,"SDPOKE "
  DATA 408,"SLPOKE "
  DATA 412,"RESERVE"
  DATA 416,"RESERVE "
  DATA 420,"RESUME "
  DATA 424,"RESUME "
  DATA 428,"RESUME "
  DATA 432,""
  DATA 436,"RECORD "
  DATA 440,"DELAY "
  DATA 444,"BGET "
  DATA 448,"BPUT "
  DATA 452,"ATEXT "
  DATA 456,"REM "
  DATA 460,"' "
  DATA 464,"==> "
  DATA 468,"DATA "
  DATA 472,"SWAP "
  DATA 476,"SWAP "
  DATA 480,"SWAP "
  DATA 484,"*"
  DATA 488,"*"
  DATA 492,"SINGLE{"
  DATA 496,"END"
  DATA 500,"LOCATE "
  DATA 504,"ON "
  DATA 508,""
  DATA 512,"ON ERROR"
  DATA 516,"ON ERROR GOSUB "
  DATA 520,"ON BREAK"
  DATA 524,"ON BREAK CONT"
  DATA 528,"ON BREAK GOSUB "
  DATA 532,"ON MENU GOSUB "
  DATA 536,"ON MENU MESSAGE GOSUB "
  DATA 540,"ON MENU KEY GOSUB "
  DATA 544,"ON MENU BUTTON "
  DATA 548,"ON MENU"
  DATA 552,"ON MENU "
  DATA 556,"MENU "
  DATA 560,"MENU OFF"
  DATA 564,"MENU KILL"
  DATA 568,"MENU "
  DATA 572,"TRON "
  DATA 576,"TRON "
  DATA 580,"TRON "
  DATA 584,"TROFF"
  DATA 588,"PRINT "
  DATA 592,"PRINT "
  DATA 596,"TEXT "
  DATA 600,"TEXT "
  DATA 604,"RCALL "
  DATA 608,"CALL "
  DATA 612,"FORM INPUT "
  DATA 616,"LINE INPUT "
  DATA 620,"LINE "
  DATA 624,""
  DATA 628,""
  DATA 632,""
  DATA 636,""
  DATA 640,"INC "
  DATA 644,"INC "
  DATA 648,"INC "
  DATA 652,"INC "
  DATA 656,"INC "
  DATA 660,"INC "
  DATA 664,"INC "
  DATA 668,"INC "
  DATA 672,"DEC "
  DATA 676,"DEC "
  DATA 680,"DEC "
  DATA 684,"DEC "
  DATA 688,"DEC "
  DATA 692,"DEC "
  DATA 696,"DEC "
  DATA 700,"DEC "
  DATA 704,"ADD "
  DATA 708,"ADD "
  DATA 712,"ADD "
  DATA 716,"ADD "
  DATA 720,"ADD "
  DATA 724,"ADD "
  DATA 728,"ADD "
  DATA 732,"ADD "
  DATA 736,"SUB "
  DATA 740,"SUB "
  DATA 744,"SUB "
  DATA 748,"SUB "
  DATA 752,"SUB "
  DATA 756,"SUB "
  DATA 760,"SUB "
  DATA 764,"SUB "
  DATA 768,"MUL "
  DATA 772,"MUL "
  DATA 776,"MUL "
  DATA 780,"MUL "
  DATA 784,"MUL "
  DATA 788,"MUL "
  DATA 792,"MUL "
  DATA 796,"MUL "
  DATA 800,"DIV "
  DATA 804,"DIV "
  DATA 808,"DIV "
  DATA 812,"DIV "
  DATA 816,"DIV "
  DATA 820,"DIV "
  DATA 824,"DIV "
  DATA 828,"DIV "
  DATA 832,"SEEK #"
  DATA 836,"RELSEEK #"
  DATA 840,"DIM "
  DATA 844,"SETCOLOR "
  DATA 848,"SETCOLOR "
  DATA 852,"BMOVE "
  DATA 856,"VDISYS "
  DATA 860,"VDISYS "
  DATA 864,"VDISYS "
  DATA 868,"VDISYS "
  DATA 872,"GEMSYS"
  DATA 876,"GEMSYS "
  DATA 880,"PTSIN("
  DATA 884,"PTSOUT("
  DATA 888,"INTIN("
  DATA 892,"INTOUT("
  DATA 896,"ADDRIN("
  DATA 900,"ADDROUT("
  DATA 904,"GINTIN("
  DATA 908,"GINTOUT("
  DATA 912,"CONTRL("
  DATA 916,"GCONTRL("
  DATA 920,"{"
  DATA 924,"LONG{"
  DATA 928,"INT{"
  DATA 932,"CARD{"
  DATA 936,"BYTE{"
  DATA 940,"CHAR{"
  DATA 944,"FLOAT{"
  DATA 948,"DOUBLE{"
  DATA 952,"ON MENU IBOX "
  DATA 956,"ON MENU OBOX "
  DATA 960,"VOID "
  DATA 964,"~"
  DATA 968,"OB_NEXT("
  DATA 972,"OB_HEAD("
  DATA 976,"OB_TAIL("
  DATA 980,"OB_TYPE("
  DATA 984,"OB_FLAGS("
  DATA 988,"OB_STATE("
  DATA 992,"OB_SPEC("
  DATA 996,"OB_X("
  DATA 1000,"OB_Y("
  DATA 1004,"OB_W("
  DATA 1008,"OB_H("
  DATA 1012,"ABSOLUTE "
  DATA 1016,"."
  DATA 1020,"RANDOMIZE "
  DATA 1024,"ALERT "
  DATA 1028,"GET "
  DATA 1032,"GET "
  DATA 1036,"GET "
  DATA 1040,"PUT "
  DATA 1044,"PUT "
  DATA 1048,"PUT "
  DATA 1052,"PUT "
  DATA 1056,""
  DATA 1060,"OPEN "
  DATA 1064,"OPENW "
  DATA 1068,"OPENW #"
  DATA 1072,"CLOSE "
  DATA 1076,"CLOSEW "
  DATA 1080,"CLOSEW #"
  DATA 1084,"CLEAR"
  DATA 1088,"CLEARW "
  DATA 1092,"CLEARW #"
  DATA 1096,"TOPW #"
  DATA 1100,"TITLEW #"
  DATA 1104,"INFOW #"
  DATA 1108,"DEFLINE "
  DATA 1112,"GRAPHMODE "
  DATA 1116,"DEFMOUSE "
  DATA 1120,"DEFMOUSE "
  DATA 1124,"DEFLIST "
  DATA 1128,"DEFMARK "
  DATA 1132,"DEFNUM "
  DATA 1136,"DEFTEXT "
  DATA 1140,"DEFFILL "
  DATA 1144,"DEFFILL "
  DATA 1148,"BOX "
  DATA 1152,"PBOX "
  DATA 1156,"RBOX "
  DATA 1160,"PRBOX "
  DATA 1164,"CIRCLE "
  DATA 1168,"CIRCLE "
  DATA 1172,"PCIRCLE "
  DATA 1176,"PCIRCLE "
  DATA 1180,"ELLIPSE "
  DATA 1184,"ELLIPSE "
  DATA 1188,"PELLIPSE "
  DATA 1192,"PELLIPSE "
  DATA 1196,"ERROR "
  DATA 1200,"FILL "
  DATA 1204,"FILL "
  DATA 1208,"HIDEM"
  DATA 1212,"LPRINT "
  DATA 1216,"LSET "
  DATA 1220,"MID$("
  DATA 1224,"NEW"
  DATA 1228,"OUT "
  DATA 1232,"OUT "
  DATA 1236,"QUIT "
  DATA 1240,""
  DATA 1244,"CHDIR "
  DATA 1248,"CHDRIVE "
  DATA 1252,"CHDRIVE "
  DATA 1256,"CLR "
  DATA 1260,"CLS "
  DATA 1264,""
  DATA 1268,"CONT"
  DATA 1272,""
  DATA 1276,"DIR "
  DATA 1280,"HTAB "
  DATA 1284,"VTAB "
  DATA 1288,"ERASE "
  DATA 1292,"EXEC "
  DATA 1296,"FIELD "
  DATA 1300,"FILES "
  DATA 1304,"TOUCH #"
  DATA 1308,""
  DATA 1312,"EDIT"
  DATA 1316,"FILESELECT "
  DATA 1320,"NAME "
  DATA 1324,"MKDIR "
  DATA 1328,"MOUSE "
  DATA 1332,"KILL "
  DATA 1336,"RMDIR "
  DATA 1340,"RSET "
  DATA 1344,"SETTIME "
  DATA 1348,"SGET "
  DATA 1352,"SHOWM"
  DATA 1356,"SPUT "
  DATA 1360,"STOP"
  DATA 1364,"SYSTEM "
  DATA 1368,"VSYNC"
  DATA 1372,"HARDCOPY"
  DATA 1376,"PAUSE "
  DATA 1380,"QSORT "
  DATA 1384,"SSORT "
  DATA 1388,"POLYLINE "
  DATA 1392,"POLYFILL "
  DATA 1396,"POLYMARK "
  DATA 1400,"INSERT "
  DATA 1404,"DELETE "
  DATA 1408,"RENAME "
  DATA 1412,"STICK "
  DATA 1416,"SOUND "
  DATA 1420,"WAVE "
  DATA 1424,"CLIP "
  DATA 1428,"CLIP "
  DATA 1432,"CLIP "
  DATA 1436,"CLIP "
  DATA 1440,"CLIP "
  DATA 1444,"FULLW "
  DATA 1448,"EVERY "
  DATA 1452,"EVERY "
  DATA 1456,"EVERY "
  DATA 1460,"AFTER "
  DATA 1464,"AFTER "
  DATA 1468,"AFTER "
  DATA 1472,"INPUT "
  DATA 1476,"INPUT "
  DATA 1480,"DRAW "
  DATA 1484,"DRAW "
  DATA 1488,"READ "
  DATA 1492,""
  DATA 1496,"SETMOUSE "
  DATA 1500,"KEYPAD "
  DATA 1504,"KEYTEST "
  DATA 1508,"KEYGET "
  DATA 1512,"KEYLOOK "
  DATA 1516,"KEYPRESS "
  DATA 1520,"KEYDEF "
  DATA 1524,"DEFINT "
  DATA 1528,"DEFFLT "
  DATA 1532,"DEFBYT "
  DATA 1536,"DEFWRD "
  DATA 1540,"DEFBIT "
  DATA 1544,"DEFSTR "
  DATA 1548,"BOUNDARY "
  DATA 1552,"LIST "
  DATA 1556,"LLIST "
  DATA 1560,"SAVE "
  DATA 1564,"PSAVE "
  DATA 1568,"CHAIN "
  DATA 1572,"RUN"
  DATA 1576,"RUN "
  DATA 1580,"LOAD "
  DATA 1584,"SETDRAW "
  DATA 1588,"ARRAYFILL "
  DATA 1592,"DUMP "
  DATA 1596,"BITBLT "
  DATA 1600,"BITBLT "
  DATA 1604,"BITBLT "
  DATA 1608,"STORE "
  DATA 1612,"RECALL "
  DATA 1616,"BSAVE "
  DATA 1620,"BLOAD "
  DATA 1624,"V~H="
  DATA 1628,"TIME$="
  DATA 1632,"DATE$="
  DATA 1636,"SPRITE "
  DATA 1640,"OPTION "
  DATA 1644,"$"
  DATA 1648,"WINDTAB("
  DATA 1652,"RC_COPY "
  DATA 1656,"MODE "
  DATA 1660,""
  DATA 1664,"WRITE "
  DATA 1668,"INLINE "
  DATA 1672,"WORD{"
  DATA 1676,"VSETCOLOR "
  DATA 1680,"OUT& "
  DATA 1684,"OUT% "
  DATA 1688,"CURVE "
  DATA 1692,"_DATA= "
  DATA 1696,"MAT ADD "
  DATA 1700,"MAT ADD "
  DATA 1704,"MAT SUB "
  DATA 1708,"MAT SUB "
  DATA 1712,"MAT CPY "
  DATA 1716,"MAT XCPY "
  DATA 1720,"MAT DET "
  DATA 1724,""
  DATA 1728,""
  DATA 1732,"MAT NORM "
  DATA 1736,"MAT READ "
  DATA 1740,"MAT PRINT "
  DATA 1744,"MAT TRANS "
  DATA 1748,"MAT CLR "
  DATA 1752,"MAT SET "
  DATA 1756,"MAT ONE "
  DATA 1760,"MAT BASE "
  DATA 1764,"MAT QDET "
  DATA 1768,"MAT INPUT "
  DATA 1772,"MAT RANG "
  DATA 1776,"MAT MUL "
  DATA 1780,"MAT MUL "
  DATA 1784,"MAT MUL "
  DATA 1788,"MAT MUL "
  DATA 1792,"MAT INV "
  DATA 1796,"FUNCTION "
  DATA 1800,"DMASOUND "
  DATA 1804,"DMACONTROL "
  DATA 1808,"MW_OUT "
  DATA -1
  ' -----
  fnk$(0)=" AND "
  fnk$(1)=" OR "
  fnk$(2)=" XOR "
  fnk$(3)=" IMP "
  fnk$(4)=" EQV "
  fnk$(5)="-"
  fnk$(6)="+"
  fnk$(7)="*"
  fnk$(8)="/"
  fnk$(9)="^"
  fnk$(10)=" MOD "
  fnk$(11)=" DIV "
  fnk$(12)="<>"
  fnk$(13)="<="
  fnk$(14)="=<"
  fnk$(15)=">="
  fnk$(16)="=>"
  fnk$(17)="<"
  fnk$(18)=">"
  fnk$(19)="="
  fnk$(20)="<>"
  fnk$(21)="<="
  fnk$(22)="=<"
  fnk$(23)=">="
  fnk$(24)="=>"
  fnk$(25)="<"
  fnk$(26)=">"
  fnk$(27)="="
  fnk$(28)="+"
  fnk$(29)="+"
  fnk$(30)="-"
  fnk$(31)="NOT "
  fnk$(32)=")"
  fnk$(33)=","
  fnk$(34)=";"
  fnk$(35)="("
  fnk$(36)="ERR$("
  fnk$(37)="INT("
  fnk$(38)="TRUNC("
  fnk$(39)="FRAC("
  fnk$(40)="ABS("
  fnk$(41)="SIN("
  fnk$(42)="COS("
  fnk$(43)="TAN("
  fnk$(44)="ATN("
  fnk$(45)="=="
  fnk$(47)="EXP("
  fnk$(48)="LOG("
  fnk$(49)="LOG10("
  fnk$(50)="VAR "
  fnk$(51)=")"
  fnk$(52)="INPAUX$"
  fnk$(53)="VAL("
  fnk$(54)="INPMID$"
  fnk$(56)="TIME$"
  fnk$(57)=")="
  fnk$(58)="LEFT$("
  fnk$(59)="LEFT$("
  fnk$(60)="RIGHT$("
  fnk$(61)="RIGHT$("
  fnk$(62)="MID$("
  fnk$(63)="MID$("
  fnk$(65)="ASIN("
  fnk$(66)="CHR$("
  fnk$(67)="}="
  fnk$(69)="="
  fnk$(71)=" TO "
  fnk$(72)=" STEP "
  fnk$(73)=" DOWNTO "
  fnk$(74)=" THEN"
  fnk$(75)=" GOTO "
  fnk$(76)=" GOSUB "
  fnk$(77)="#"
  fnk$(78)="SQR("
  fnk$(79)="PI"
  fnk$(80)="["
  fnk$(81)="]"
  fnk$(82)="ACOS("
  fnk$(83)="INKEY$"
  fnk$(84)="RND("
  fnk$(85)="RND"
  fnk$(86)="RANDOM("
  fnk$(87)="'"
  fnk$(88)="}"
  fnk$(89)="AT("
  fnk$(90)="IF"
  fnk$(91)="\"
  fnk$(92)="FLOAT{"
  fnk$(93)="DOUBLE{"
  fnk$(94)="INPUT$("
  fnk$(95)="INPUT$("
  fnk$(96)="INPUT"
  fnk$(97)="CHAR{"
  fnk$(98)="MKI$("
  fnk$(99)="MKL$("
  fnk$(100)="MKS$("
  fnk$(101)="MKF$("
  fnk$(102)="MKD$("
  fnk$(103)="DEG("
  fnk$(104)="RAD("
  fnk$(105)="CVS("
  fnk$(106)="CVF("
  fnk$(107)="CVD("
  fnk$(108)=" AS "
  fnk$(109)=" OFFSET "
  fnk$(110)="CFLOAT("
  fnk$(111)="TRACE$"
  fnk$(112)="ROUND("
  fnk$(113)="ROUND("
  fnk$(114)=" WITH "
  fnk$(115)="BIN$("
  fnk$(116)="BIN$("
  fnk$(117)="MIN("
  fnk$(118)="MIN("
  fnk$(119)="MAX("
  fnk$(120)="MAX("
  fnk$(121)="SINGLE{"
  fnk$(122)=" AT("
  fnk$(123)="SINQ("
  fnk$(124)=":"
  fnk$(125)="COSQ("
  fnk$(126)="DATE$"
  fnk$(127)="UPPER$("
  fnk$(128)="SPACE$("
  fnk$(129)="STRING$("
  fnk$(130)="STRING$("
  fnk$(131)="SUCC("
  fnk$(132)="DIR$("
  fnk$(133)="PRED("
  fnk$(134)="DRAW("
  fnk$(135)="TRIM$("
  fnk$(138)="L:"
  fnk$(139)="W:"
  fnk$(140)="FACT("
  fnk$(141)="COMBIN("
  fnk$(143)="VARIAT("
  fnk$(151)="ERROR"
  fnk$(152)="STOP"
  fnk$(153)="BREAK"
  fnk$(154)=" CONT"
  fnk$(155)="FIX("
  fnk$(156)=","
  fnk$(157)="("
  fnk$(158)="FN "
  fnk$(159)="@"
  fnk$(161)="TAB("
  fnk$(162)="SPC("
  fnk$(163)="USING "
  fnk$(167)="MENU"
  fnk$(168)="NEXT"
  fnk$(170)="KEY"
  fnk$(171)="BUTTON"
  fnk$(172)="IBOX"
  fnk$(173)="OBOX"
  fnk$(174)="MESSAGE"
  fnk$(175)="OFF"
  fnk$(176)="KILL"
  fnk$(182)="BASE "
  fnk$(184)="0"
  fnk$(185)="1"
  fnk$(188)="TRUE"
  fnk$(189)="FALSE"
  fnk$(190)="STR$("
  fnk$(191)="STR$("
  fnk$(192)="STR$("
  fnk$(193)="HEX$("
  fnk$(194)="HEX$("
  fnk$(195)="OCT$("
  fnk$(196)="OCT$("
  ' -----
  fnk2$(0)="MUL("
  fnk2$(1)="DIV("
  fnk2$(2)="ADD("
  fnk2$(3)="SUB("
  fnk2$(4)="MOD("
  fnk2$(5)="AND("
  fnk2$(6)="OR("
  fnk2$(7)="XOR("
  fnk2$(8)="EQV("
  fnk2$(9)="IMP("
  fnk2$(10)="SHL("
  fnk2$(11)="SHR("
  fnk2$(12)="ROL("
  fnk2$(13)="ROR("
  fnk2$(14)="WORD("
  fnk2$(15)="CARD("
  fnk2$(16)="BYTE("
  fnk2$(17)="SWAP("
  fnk2$(18)="ADDRIN("
  fnk2$(19)="ADDRIN"
  fnk2$(20)="ADDROUT("
  fnk2$(21)="ADDROUT"
  fnk2$(22)="CONTRL("
  fnk2$(23)="CONTRL"
  fnk2$(24)="GCONTRL("
  fnk2$(25)="GCONTRL"
  fnk2$(26)="GINTIN("
  fnk2$(27)="GINTIN"
  fnk2$(28)="GINTOUT("
  fnk2$(29)="GINTOUT"
  fnk2$(30)="HIMEM"
  fnk2$(31)="BASEPAGE"
  fnk2$(32)="INTIN("
  fnk2$(33)="INTIN"
  fnk2$(34)="INTOUT("
  fnk2$(35)="INTOUT"
  fnk2$(36)="PTSIN("
  fnk2$(37)="PTSIN"
  fnk2$(38)="PTSOUT("
  fnk2$(39)="PTSOUT"
  fnk2$(40)="VDIBASE"
  fnk2$(41)="WINDTAB("
  fnk2$(42)="WINDTAB"
  fnk2$(43)="PTST("
  fnk2$(44)="BTST("
  fnk2$(45)="BSET("
  fnk2$(46)="BCLR("
  fnk2$(47)="BCHG("
  fnk2$(48)="SHL&("
  fnk2$(49)="SHR&("
  fnk2$(50)="ROL&("
  fnk2$(51)="ROR&("
  fnk2$(52)="SHL|("
  fnk2$(53)="SHR|("
  fnk2$(54)="ROL|("
  fnk2$(55)="ROR|("
  fnk2$(56)="CRSLIN"
  fnk2$(57)="CRSCOL"
  fnk2$(58)="MOUSEX"
  fnk2$(59)="MOUSEY"
  fnk2$(60)="MOUSEK"
  fnk2$(61)="GB"
  fnk2$(62)="TIMER"
  fnk2$(63)="PEEK("
  fnk2$(64)="DPEEK("
  fnk2$(65)="LPEEK("
  fnk2$(66)="LEN("
  fnk2$(67)="ASC("
  fnk2$(68)="INSTR("
  fnk2$(69)="INSTR("
  fnk2$(70)="INSTR("
  fnk2$(71)="FRE("
  fnk2$(72)="POINT("
  fnk2$(73)="VAL?("
  fnk2$(74)="INP("
  fnk2$(75)="CVI("
  fnk2$(76)="CVL("
  fnk2$(77)="INP(#"
  fnk2$(78)="EOF(#"
  fnk2$(79)="LOF(#"
  fnk2$(80)="LOC(#"
  fnk2$(81)="DIM?("
  fnk2$(82)="RAND("
  fnk2$(83)="DFREE("
  fnk2$(84)="EXIST("
  fnk2$(85)="BIOS("
  fnk2$(86)="XBIOS("
  fnk2$(87)="GEMDOS("
  fnk2$(88)="ERR"
  fnk2$(89)="FATAL"
  fnk2$(90)="POS("
  fnk2$(91)="LPOS("
  fnk2$(92)="MENU("
  fnk2$(93)="INP?("
  fnk2$(94)="OUT?("
  fnk2$(95)="EXEC("
  fnk2$(96)="SUCC("
  fnk2$(97)="PRED("
  fnk2$(98)="W_HAND(#"
  fnk2$(99)="W_INDEX(#"
  fnk2$(100)="SGN("
  fnk2$(101)="EVEN("
  fnk2$(102)="ODD("
  fnk2$(103)="CINT("
  fnk2$(104)="GDOS?"
  fnk2$(105)="V_OPNWK("
  fnk2$(106)="V_CLSWK()"
  fnk2$(107)="V_OPNVWK("
  fnk2$(108)="V_CLSVWK()"
  fnk2$(109)="V_UPDWK()"
  fnk2$(110)="VST_LOAD_FONTS("
  fnk2$(111)="VST_UNLOAD_FONTS("
  fnk2$(112)="{"
  fnk2$(113)="LONG{"
  fnk2$(114)="INT{"
  fnk2$(115)="CARD{"
  fnk2$(116)="BYTE{"
  fnk2$(117)="C:"
  fnk2$(118)="EVNT_KEYBD()"
  fnk2$(119)="EVNT_BUTTON("
  fnk2$(120)="EVNT_MOUSE("
  fnk2$(121)="EVNT_MESAG("
  fnk2$(122)="EVNT_TIMER("
  fnk2$(123)="EVNT_MULTI("
  fnk2$(124)="RSRC_LOAD("
  fnk2$(125)="RSRC_FREE()"
  fnk2$(126)="RSRC_GADDR("
  fnk2$(127)="RSRC_SADDR("
  fnk2$(128)="RSRC_OBFIX("
  fnk2$(129)="SHEL_READ("
  fnk2$(130)="SHEL_WRITE("
  fnk2$(131)="SHEL_GET("
  fnk2$(132)="SHEL_PUT("
  fnk2$(133)="SHEL_FIND("
  fnk2$(134)="SHEL_ENVRN("
  fnk2$(135)="APPL_INIT()"
  fnk2$(136)="APPL_READ("
  fnk2$(137)="APPL_WRITE("
  fnk2$(138)="APPL_FIND("
  fnk2$(139)="APPL_TPLAY("
  fnk2$(140)="APPL_TRECORD("
  fnk2$(141)="APPL_EXIT()"
  fnk2$(142)="EVNT_DCLICK("
  fnk2$(143)="MENU_BAR("
  fnk2$(144)="MENU_ICHECK("
  fnk2$(145)="MENU_IENABLE("
  fnk2$(146)="MENU_TNORMAL("
  fnk2$(147)="MENU_TEXT("
  fnk2$(148)="MENU_REGISTER("
  fnk2$(149)="OBJC_ADD("
  fnk2$(150)="OBJC_DELETE("
  fnk2$(151)="OBJC_DRAW("
  fnk2$(152)="OBJC_FIND("
  fnk2$(153)="OBJC_OFFSET("
  fnk2$(154)="OBJC_ORDER("
  fnk2$(155)="OBJC_EDIT("
  fnk2$(156)="OBJC_CHANGE("
  fnk2$(157)="FORM_DO("
  fnk2$(158)="FORM_DIAL("
  fnk2$(159)="FORM_ALERT("
  fnk2$(160)="FORM_ERROR("
  fnk2$(161)="FORM_CENTER("
  fnk2$(162)="GRAF_RUBBERBOX("
  fnk2$(163)="GRAF_DRAGBOX("
  fnk2$(164)="GRAF_MOVEBOX("
  fnk2$(165)="GRAF_GROWBOX("
  fnk2$(166)="GRAF_SHRINKBOX("
  fnk2$(167)="GRAF_WATCHBOX("
  fnk2$(168)="GRAF_SLIDEBOX("
  fnk2$(169)="GRAF_HANDLE("
  fnk2$(170)="GRAF_MOUSE("
  fnk2$(171)="GRAF_MKSTATE("
  fnk2$(172)="SCRP_READ("
  fnk2$(173)="SCRP_WRITE("
  fnk2$(174)="FSEL_INPUT("
  fnk2$(175)="WIND_CREATE("
  fnk2$(176)="WIND_OPEN("
  fnk2$(177)="WIND_CLOSE("
  fnk2$(178)="WIND_DELETE("
  fnk2$(179)="WIND_GET("
  fnk2$(180)="WIND_SET("
  fnk2$(181)="WIND_FIND("
  fnk2$(182)="WIND_UPDATE("
  fnk2$(183)="WIND_CALC("
  fnk2$(184)="MALLOC("
  fnk2$(185)="MFREE("
  fnk2$(186)="MSHRINK("
  fnk2$(187)="VARPTR("
  fnk2$(188)="ARRPTR("
  fnk2$(189)="*"
  fnk2$(190)="TYPE("
  fnk2$(191)="OB_ADR("
  fnk2$(192)="OB_NEXT("
  fnk2$(193)="OB_HEAD("
  fnk2$(194)="OB_TAIL("
  fnk2$(195)="OB_TYPE("
  fnk2$(196)="OB_FLAGS("
  fnk2$(197)="OB_STATE("
  fnk2$(198)="OB_SPEC("
  fnk2$(199)="OB_X("
  fnk2$(200)="OB_Y("
  fnk2$(201)="OB_W("
  fnk2$(202)="OB_H("
  fnk2$(203)="V:"
  fnk2$(204)="FORM_KEYBD("
  fnk2$(205)="FORM_BUTTON("
  fnk2$(206)="STICK("
  fnk2$(207)="STRIG("
  fnk2$(208)="WORK_OUT("
  fnk2$(209)="RINSTR("
  fnk2$(210)="RINSTR("
  fnk2$(211)="RINSTR("
  fnk2$(212)="L~A"
  fnk2$(213)="V~H"
  fnk2$(214)="V_CLRWK()"
  fnk2$(215)="VQT_NAME("
  fnk2$(216)="VQT_EXTENT("
  fnk2$(217)="RC_INTERSECT("
  fnk2$(218)="FSFIRST("
  fnk2$(219)="FSNEXT()"
  fnk2$(220)="FSETDTA("
  fnk2$(221)="FGETDTA()"
  fnk2$(222)="WORD{"
  fnk2$(223)="INP&("
  fnk2$(224)="INP&(#"
  fnk2$(225)="INP%("
  fnk2$(226)="INP%(#"
  fnk2$(227)="_DATA"
  fnk2$(228)="PADX("
  fnk2$(229)="PADY("
  fnk2$(230)="PADT("
  fnk2$(231)="LPENX"
  fnk2$(232)="LPENY"
  fnk2$(233)="STE?"
  fnk2$(234)="TT?"
  fnk2$(235)="SCALE("
  fnk2$(236)="_X"
  fnk2$(237)="_Y"
  fnk2$(238)="_C"
  fnk2$(239)="GETSIZE("
  fnk2$(240)=""
  fnk2$(241)=""
  fnk2$(242)=""
  fnk2$(243)=""
  fnk2$(244)=""
  fnk2$(245)=""
  fnk2$(246)=""
  fnk2$(247)=""
  fnk2$(248)=""
  fnk2$(249)=""
  fnk2$(250)=""
  fnk2$(251)=""
  fnk2$(252)=""
  fnk2$(253)=""
  fnk2$(254)=""
RETURN
> PROCEDURE gf4tp_stoken
  ' ++SYM
  max_token&=453
  max_funcs&=196
  max_func2&=254
  ' --SYM
  '
cmd_stoken:
  DATA 536,"ON MENU MESSAGE GOSUB "
  DATA 540,"ON MENU KEY GOSUB "
  DATA 516,"ON ERROR GOSUB "
  DATA 528,"ON BREAK GOSUB "
  DATA 544,"ON MENU BUTTON "
  DATA 532,"ON MENU GOSUB "
  DATA 524,"ON BREAK CONT"
  DATA 952,"ON MENU IBOX "
  DATA 956,"ON MENU OBOX "
  DATA 204,"LOOP WHILE "
  DATA 208,"LOOP UNTIL "
  DATA 612,"FORM INPUT "
  DATA 616,"LINE INPUT "
  DATA 1316,"FILESELECT "
  DATA 1804,"DMACONTROL "
  DATA 24,"PROCEDURE "
  DATA 216,"PROCEDURE "
  DATA 1020,"RANDOMIZE "
  DATA 1112,"GRAPHMODE "
  DATA 1588,"ARRAYFILL "
  DATA 1676,"VSETCOLOR "
  DATA 1740,"MAT PRINT "
  DATA 1744,"MAT TRANS "
  DATA 1768,"MAT INPUT "
  DATA 40,"FUNCTION "
  DATA 52,"ENDSELECT"
  DATA 196,"DO WHILE "
  DATA 200,"DO UNTIL "
  DATA 564,"MENU KILL"
  DATA 836,"RELSEEK #"
  DATA 844,"SETCOLOR "
  DATA 848,"SETCOLOR "
  DATA 984,"OB_FLAGS("
  DATA 988,"OB_STATE("
  DATA 1012,"ABSOLUTE "
  DATA 1116,"DEFMOUSE "
  DATA 1120,"DEFMOUSE "
  DATA 1188,"PELLIPSE "
  DATA 1192,"PELLIPSE "
  DATA 1388,"POLYLINE "
  DATA 1392,"POLYFILL "
  DATA 1396,"POLYMARK "
  DATA 1496,"SETMOUSE "
  DATA 1516,"KEYPRESS "
  DATA 1548,"BOUNDARY "
  DATA 1716,"MAT XCPY "
  DATA 1732,"MAT NORM "
  DATA 1736,"MAT READ "
  DATA 1760,"MAT BASE "
  DATA 1764,"MAT QDET "
  DATA 1772,"MAT RANG "
  DATA 1796,"FUNCTION "
  DATA 1800,"DMASOUND "
  DATA 64,"ELSE IF "
  DATA 172,"EXIT IF "
  DATA 220,"EXIT IF "
  DATA 236,"RESTORE "
  DATA 416,"RESERVE "
  DATA 512,"ON ERROR"
  DATA 520,"ON BREAK"
  DATA 552,"ON MENU "
  DATA 560,"MENU OFF"
  DATA 900,"ADDROUT("
  DATA 908,"GINTOUT("
  DATA 916,"GCONTRL("
  DATA 968,"OB_NEXT("
  DATA 972,"OB_HEAD("
  DATA 976,"OB_TAIL("
  DATA 980,"OB_TYPE("
  DATA 992,"OB_SPEC("
  DATA 1080,"CLOSEW #"
  DATA 1092,"CLEARW #"
  DATA 1100,"TITLEW #"
  DATA 1108,"DEFLINE "
  DATA 1124,"DEFLIST "
  DATA 1128,"DEFMARK "
  DATA 1136,"DEFTEXT "
  DATA 1140,"DEFFILL "
  DATA 1144,"DEFFILL "
  DATA 1172,"PCIRCLE "
  DATA 1176,"PCIRCLE "
  DATA 1180,"ELLIPSE "
  DATA 1184,"ELLIPSE "
  DATA 1248,"CHDRIVE "
  DATA 1252,"CHDRIVE "
  DATA 1344,"SETTIME "
  DATA 1372,"HARDCOPY"
  DATA 1504,"KEYTEST "
  DATA 1512,"KEYLOOK "
  DATA 1584,"SETDRAW "
  DATA 1648,"WINDTAB("
  DATA 1652,"RC_COPY "
  DATA 1696,"MAT ADD "
  DATA 1700,"MAT ADD "
  DATA 1704,"MAT SUB "
  DATA 1708,"MAT SUB "
  DATA 1712,"MAT CPY "
  DATA 1720,"MAT DET "
  DATA 1748,"MAT CLR "
  DATA 1752,"MAT SET "
  DATA 1756,"MAT ONE "
  DATA 1776,"MAT MUL "
  DATA 1780,"MAT MUL "
  DATA 1784,"MAT MUL "
  DATA 1788,"MAT MUL "
  DATA 1792,"MAT INV "
  DATA 44,"ENDFUNC"
  DATA 48,"SELECT "
  DATA 60,"DEFAULT"
  DATA 68,"RETURN "
  DATA 72,"RETURN "
  DATA 176,"SELECT "
  DATA 404,"SDPOKE "
  DATA 408,"SLPOKE "
  DATA 412,"RESERVE"
  DATA 420,"RESUME "
  DATA 424,"RESUME "
  DATA 428,"RESUME "
  DATA 436,"RECORD "
  DATA 492,"SINGLE{"
  DATA 500,"LOCATE "
  DATA 548,"ON MENU"
  DATA 856,"VDISYS "
  DATA 860,"VDISYS "
  DATA 864,"VDISYS "
  DATA 868,"VDISYS "
  DATA 876,"GEMSYS "
  DATA 884,"PTSOUT("
  DATA 892,"INTOUT("
  DATA 896,"ADDRIN("
  DATA 904,"GINTIN("
  DATA 912,"CONTRL("
  DATA 948,"DOUBLE{"
  DATA 1068,"OPENW #"
  DATA 1076,"CLOSEW "
  DATA 1088,"CLEARW "
  DATA 1104,"INFOW #"
  DATA 1132,"DEFNUM "
  DATA 1164,"CIRCLE "
  DATA 1168,"CIRCLE "
  DATA 1212,"LPRINT "
  DATA 1304,"TOUCH #"
  DATA 1364,"SYSTEM "
  DATA 1400,"INSERT "
  DATA 1404,"DELETE "
  DATA 1408,"RENAME "
  DATA 1500,"KEYPAD "
  DATA 1508,"KEYGET "
  DATA 1520,"KEYDEF "
  DATA 1524,"DEFINT "
  DATA 1528,"DEFFLT "
  DATA 1532,"DEFBYT "
  DATA 1536,"DEFWRD "
  DATA 1540,"DEFBIT "
  DATA 1544,"DEFSTR "
  DATA 1596,"BITBLT "
  DATA 1600,"BITBLT "
  DATA 1604,"BITBLT "
  DATA 1612,"RECALL "
  DATA 1636,"SPRITE "
  DATA 1640,"OPTION "
  DATA 1668,"INLINE "
  DATA 1692,"_DATA= "
  DATA 1808,"MW_OUT "
  DATA 8,"REPEAT"
  DATA 12,"UNTIL "
  DATA 16,"WHILE "
  DATA 28,"RETURN"
  DATA 212,"LOCAL "
  DATA 228,"DEFFN "
  DATA 244,"GOSUB "
  DATA 360,"ALINE "
  DATA 364,"HLINE "
  DATA 368,"ARECT "
  DATA 372,"APOLY "
  DATA 376,"ACHAR "
  DATA 380,"ACLIP "
  DATA 384,"COLOR "
  DATA 392,"DPOKE "
  DATA 396,"LPOKE "
  DATA 400,"SPOKE "
  DATA 440,"DELAY "
  DATA 452,"ATEXT "
  DATA 588,"PRINT "
  DATA 592,"PRINT "
  DATA 604,"RCALL "
  DATA 832,"SEEK #"
  DATA 852,"BMOVE "
  DATA 872,"GEMSYS"
  DATA 880,"PTSIN("
  DATA 888,"INTIN("
  DATA 944,"FLOAT{"
  DATA 1024,"ALERT "
  DATA 1064,"OPENW "
  DATA 1072,"CLOSE "
  DATA 1096,"TOPW #"
  DATA 1160,"PRBOX "
  DATA 1196,"ERROR "
  DATA 1244,"CHDIR "
  DATA 1288,"ERASE "
  DATA 1296,"FIELD "
  DATA 1300,"FILES "
  DATA 1324,"MKDIR "
  DATA 1328,"MOUSE "
  DATA 1336,"RMDIR "
  DATA 1376,"PAUSE "
  DATA 1380,"QSORT "
  DATA 1384,"SSORT "
  DATA 1412,"STICK "
  DATA 1416,"SOUND "
  DATA 1444,"FULLW "
  DATA 1448,"EVERY "
  DATA 1452,"EVERY "
  DATA 1456,"EVERY "
  DATA 1460,"AFTER "
  DATA 1464,"AFTER "
  DATA 1468,"AFTER "
  DATA 1472,"INPUT "
  DATA 1476,"INPUT "
  DATA 1556,"LLIST "
  DATA 1564,"PSAVE "
  DATA 1568,"CHAIN "
  DATA 1608,"STORE "
  DATA 1616,"BSAVE "
  DATA 1620,"BLOAD "
  DATA 1628,"TIME$="
  DATA 1632,"DATE$="
  DATA 1664,"WRITE "
  DATA 1688,"CURVE "
  DATA 36,"ENDIF"
  DATA 124,"NEXT "
  DATA 128,"NEXT "
  DATA 132,"NEXT "
  DATA 136,"NEXT "
  DATA 140,"NEXT "
  DATA 144,"NEXT "
  DATA 148,"NEXT "
  DATA 152,"NEXT "
  DATA 156,"NEXT "
  DATA 160,"NEXT "
  DATA 164,"NEXT "
  DATA 168,"NEXT "
  DATA 224,"CASE "
  DATA 232,"GOTO "
  DATA 352,"PLOT "
  DATA 356,"PSET "
  DATA 388,"POKE "
  DATA 444,"BGET "
  DATA 448,"BPUT "
  DATA 468,"DATA "
  DATA 472,"SWAP "
  DATA 476,"SWAP "
  DATA 480,"SWAP "
  DATA 556,"MENU "
  DATA 568,"MENU "
  DATA 572,"TRON "
  DATA 576,"TRON "
  DATA 580,"TRON "
  DATA 584,"TROFF"
  DATA 596,"TEXT "
  DATA 600,"TEXT "
  DATA 608,"CALL "
  DATA 620,"LINE "
  DATA 924,"LONG{"
  DATA 932,"CARD{"
  DATA 936,"BYTE{"
  DATA 940,"CHAR{"
  DATA 960,"VOID "
  DATA 996,"OB_X("
  DATA 1000,"OB_Y("
  DATA 1004,"OB_W("
  DATA 1008,"OB_H("
  DATA 1060,"OPEN "
  DATA 1084,"CLEAR"
  DATA 1152,"PBOX "
  DATA 1156,"RBOX "
  DATA 1200,"FILL "
  DATA 1204,"FILL "
  DATA 1208,"HIDEM"
  DATA 1216,"LSET "
  DATA 1220,"MID$("
  DATA 1236,"QUIT "
  DATA 1280,"HTAB "
  DATA 1284,"VTAB "
  DATA 1292,"EXEC "
  DATA 1320,"NAME "
  DATA 1332,"KILL "
  DATA 1340,"RSET "
  DATA 1348,"SGET "
  DATA 1352,"SHOWM"
  DATA 1356,"SPUT "
  DATA 1368,"VSYNC"
  DATA 1420,"WAVE "
  DATA 1424,"CLIP "
  DATA 1428,"CLIP "
  DATA 1432,"CLIP "
  DATA 1436,"CLIP "
  DATA 1440,"CLIP "
  DATA 1480,"DRAW "
  DATA 1484,"DRAW "
  DATA 1488,"READ "
  DATA 1552,"LIST "
  DATA 1560,"SAVE "
  DATA 1580,"LOAD "
  DATA 1592,"DUMP "
  DATA 1656,"MODE "
  DATA 1672,"WORD{"
  DATA 1680,"OUT& "
  DATA 1684,"OUT% "
  DATA 4,"LOOP"
  DATA 20,"WEND"
  DATA 56,"ELSE"
  DATA 76,"FOR "
  DATA 80,"FOR "
  DATA 84,"FOR "
  DATA 88,"FOR "
  DATA 92,"FOR "
  DATA 96,"FOR "
  DATA 100,"FOR "
  DATA 104,"FOR "
  DATA 108,"FOR "
  DATA 112,"FOR "
  DATA 116,"FOR "
  DATA 120,"FOR "
  DATA 256,"LET "
  DATA 260,"LET "
  DATA 264,"LET "
  DATA 268,"LET "
  DATA 272,"LET "
  DATA 276,"LET "
  DATA 280,"LET "
  DATA 284,"LET "
  DATA 288,"LET "
  DATA 292,"LET "
  DATA 296,"LET "
  DATA 300,"LET "
  DATA 456,"REM "
  DATA 464,"==> "
  DATA 640,"INC "
  DATA 644,"INC "
  DATA 648,"INC "
  DATA 652,"INC "
  DATA 656,"INC "
  DATA 660,"INC "
  DATA 664,"INC "
  DATA 668,"INC "
  DATA 672,"DEC "
  DATA 676,"DEC "
  DATA 680,"DEC "
  DATA 684,"DEC "
  DATA 688,"DEC "
  DATA 692,"DEC "
  DATA 696,"DEC "
  DATA 700,"DEC "
  DATA 704,"ADD "
  DATA 708,"ADD "
  DATA 712,"ADD "
  DATA 716,"ADD "
  DATA 720,"ADD "
  DATA 724,"ADD "
  DATA 728,"ADD "
  DATA 732,"ADD "
  DATA 736,"SUB "
  DATA 740,"SUB "
  DATA 744,"SUB "
  DATA 748,"SUB "
  DATA 752,"SUB "
  DATA 756,"SUB "
  DATA 760,"SUB "
  DATA 764,"SUB "
  DATA 768,"MUL "
  DATA 772,"MUL "
  DATA 776,"MUL "
  DATA 780,"MUL "
  DATA 784,"MUL "
  DATA 788,"MUL "
  DATA 792,"MUL "
  DATA 796,"MUL "
  DATA 800,"DIV "
  DATA 804,"DIV "
  DATA 808,"DIV "
  DATA 812,"DIV "
  DATA 816,"DIV "
  DATA 820,"DIV "
  DATA 824,"DIV "
  DATA 828,"DIV "
  DATA 840,"DIM "
  DATA 928,"INT{"
  DATA 1028,"GET "
  DATA 1032,"GET "
  DATA 1036,"GET "
  DATA 1040,"PUT "
  DATA 1044,"PUT "
  DATA 1048,"PUT "
  DATA 1052,"PUT "
  DATA 1148,"BOX "
  DATA 1228,"OUT "
  DATA 1232,"OUT "
  DATA 1256,"CLR "
  DATA 1260,"CLS "
  DATA 1268,"CONT"
  DATA 1276,"DIR "
  DATA 1312,"EDIT"
  DATA 1360,"STOP"
  DATA 1576,"RUN "
  DATA 1624,"V~H="
  DATA 32,"IF "
  DATA 496,"END"
  DATA 504,"ON "
  DATA 1224,"NEW"
  DATA 1572,"RUN"
  DATA 460,"' "
  DATA 248,"@"
  DATA 484,"*"
  DATA 488,"*"
  DATA 920,"{"
  DATA 964,"~"
  DATA 1016,"."
  DATA 1644,"$"
  DATA 1660,""
  DATA 1724,""
  DATA 1728,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA -1
  ' ---
  DATA 73," DOWNTO "
  DATA 109," OFFSET "
  DATA 129,"STRING$("
  DATA 130,"STRING$("
  DATA 52,"INPAUX$"
  DATA 54,"INPMID$"
  DATA 60,"RIGHT$("
  DATA 61,"RIGHT$("
  DATA 76," GOSUB "
  DATA 86,"RANDOM("
  DATA 93,"DOUBLE{"
  DATA 94,"INPUT$("
  DATA 95,"INPUT$("
  DATA 110,"CFLOAT("
  DATA 121,"SINGLE{"
  DATA 127,"UPPER$("
  DATA 128,"SPACE$("
  DATA 141,"COMBIN("
  DATA 143,"VARIAT("
  DATA 174,"MESSAGE"
  DATA 38,"TRUNC("
  DATA 49,"LOG10("
  DATA 58,"LEFT$("
  DATA 59,"LEFT$("
  DATA 72," STEP "
  DATA 75," GOTO "
  DATA 83,"INKEY$"
  DATA 92,"FLOAT{"
  DATA 111,"TRACE$"
  DATA 112,"ROUND("
  DATA 113,"ROUND("
  DATA 114," WITH "
  DATA 135,"TRIM$("
  DATA 163,"USING "
  DATA 171,"BUTTON"
  DATA 0," AND "
  DATA 2," XOR "
  DATA 3," IMP "
  DATA 4," EQV "
  DATA 10," MOD "
  DATA 11," DIV "
  DATA 36,"ERR$("
  DATA 39,"FRAC("
  DATA 56,"TIME$"
  DATA 62,"MID$("
  DATA 63,"MID$("
  DATA 65,"ASIN("
  DATA 66,"CHR$("
  DATA 74," THEN"
  DATA 82,"ACOS("
  DATA 96,"INPUT"
  DATA 97,"CHAR{"
  DATA 98,"MKI$("
  DATA 99,"MKL$("
  DATA 100,"MKS$("
  DATA 101,"MKF$("
  DATA 102,"MKD$("
  DATA 115,"BIN$("
  DATA 116,"BIN$("
  DATA 123,"SINQ("
  DATA 125,"COSQ("
  DATA 126,"DATE$"
  DATA 131,"SUCC("
  DATA 132,"DIR$("
  DATA 133,"PRED("
  DATA 134,"DRAW("
  DATA 140,"FACT("
  DATA 151,"ERROR"
  DATA 153,"BREAK"
  DATA 154," CONT"
  DATA 182,"BASE "
  DATA 189,"FALSE"
  DATA 190,"STR$("
  DATA 191,"STR$("
  DATA 192,"STR$("
  DATA 193,"HEX$("
  DATA 194,"HEX$("
  DATA 195,"OCT$("
  DATA 196,"OCT$("
  DATA 1," OR "
  DATA 31,"NOT "
  DATA 37,"INT("
  DATA 40,"ABS("
  DATA 41,"SIN("
  DATA 42,"COS("
  DATA 43,"TAN("
  DATA 44,"ATN("
  DATA 47,"EXP("
  DATA 48,"LOG("
  DATA 50,"VAR "
  DATA 53,"VAL("
  DATA 71," TO "
  DATA 78,"SQR("
  DATA 84,"RND("
  DATA 103,"DEG("
  DATA 104,"RAD("
  DATA 105,"CVS("
  DATA 106,"CVF("
  DATA 107,"CVD("
  DATA 108," AS "
  DATA 117,"MIN("
  DATA 118,"MIN("
  DATA 119,"MAX("
  DATA 120,"MAX("
  DATA 122," AT("
  DATA 152,"STOP"
  DATA 155,"FIX("
  DATA 161,"TAB("
  DATA 162,"SPC("
  DATA 167,"MENU"
  DATA 168,"NEXT"
  DATA 172,"IBOX"
  DATA 173,"OBOX"
  DATA 176,"KILL"
  DATA 188,"TRUE"
  DATA 85,"RND"
  DATA 89,"AT("
  DATA 158,"FN "
  DATA 170,"KEY"
  DATA 175,"OFF"
  DATA 12,"<>"
  DATA 13,"<="
  DATA 14,"=<"
  DATA 15,">="
  DATA 16,"=>"
  DATA 20,"<>"
  DATA 21,"<="
  DATA 22,"=<"
  DATA 23,">="
  DATA 24,"=>"
  DATA 45,"=="
  DATA 67,"}="
  DATA 79,"PI"
  DATA 90,"IF"
  DATA 138,"L:"
  DATA 139,"W:"
  DATA 57,","   ! -- ++
  DATA 5,"-"
  DATA 6,"+"
  DATA 7,"*"
  DATA 8,"/"
  DATA 9,"^"
  DATA 17,"<"
  DATA 18,">"
  DATA 19,"="
  DATA 25,"<"
  DATA 26,">"
  DATA 27,"="
  DATA 28,"+"
  DATA 29,"+"
  DATA 30,"-"
  DATA 32,")"
  DATA 33,","
  '
  DATA 34,";"
  DATA 35,"("
  DATA 51,")"
  DATA 69,"="
  DATA 77,"#"
  DATA 80,"["
  DATA 81,"]"
  DATA 87,"'"
  DATA 88,"}"
  DATA 91,"\"
  DATA 124,":"
  DATA 156,","
  DATA 157,"("
  DATA 159,"@"
  DATA 184,"0"
  DATA 185,"1"
  DATA 186,""
  DATA 187,""
  DATA 197,""
  DATA 198,""
  DATA 199,""
  DATA 200,""
  DATA 201,""
  DATA 202,""
  DATA 203,""
  DATA 204,""
  DATA 205,""
  DATA 206,""
  DATA 207,""
  DATA 208,""
  DATA 209,""
  DATA 210,""
  DATA 211,""
  DATA 212,""
  DATA 213,""
  DATA 214,""
  DATA 215,""
  DATA 216,""
  DATA 217,""
  DATA 218,""
  DATA 219,""
  DATA 220,""
  DATA 221,""
  DATA 222,""
  DATA -1
  ' ---
  DATA 111,"VST_UNLOAD_FONTS("
  DATA 110,"VST_LOAD_FONTS("
  DATA 162,"GRAF_RUBBERBOX("
  DATA 166,"GRAF_SHRINKBOX("
  DATA 148,"MENU_REGISTER("
  DATA 167,"GRAF_WATCHBOX("
  DATA 168,"GRAF_SLIDEBOX("
  DATA 140,"APPL_TRECORD("
  DATA 145,"MENU_IENABLE("
  DATA 146,"MENU_TNORMAL("
  DATA 163,"GRAF_DRAGBOX("
  DATA 164,"GRAF_MOVEBOX("
  DATA 165,"GRAF_GROWBOX("
  DATA 171,"GRAF_MKSTATE("
  DATA 217,"RC_INTERSECT("
  DATA 118,"EVNT_KEYBD()"
  DATA 119,"EVNT_BUTTON("
  DATA 142,"EVNT_DCLICK("
  DATA 144,"MENU_ICHECK("
  DATA 150,"OBJC_DELETE("
  DATA 153,"OBJC_OFFSET("
  DATA 156,"OBJC_CHANGE("
  DATA 161,"FORM_CENTER("
  DATA 169,"GRAF_HANDLE("
  DATA 175,"WIND_CREATE("
  DATA 178,"WIND_DELETE("
  DATA 182,"WIND_UPDATE("
  DATA 205,"FORM_BUTTON("
  DATA 120,"EVNT_MOUSE("
  DATA 121,"EVNT_MESAG("
  DATA 122,"EVNT_TIMER("
  DATA 123,"EVNT_MULTI("
  DATA 125,"RSRC_FREE()"
  DATA 126,"RSRC_GADDR("
  DATA 127,"RSRC_SADDR("
  DATA 128,"RSRC_OBFIX("
  DATA 130,"SHEL_WRITE("
  DATA 134,"SHEL_ENVRN("
  DATA 135,"APPL_INIT()"
  DATA 137,"APPL_WRITE("
  DATA 139,"APPL_TPLAY("
  DATA 141,"APPL_EXIT()"
  DATA 154,"OBJC_ORDER("
  DATA 159,"FORM_ALERT("
  DATA 160,"FORM_ERROR("
  DATA 170,"GRAF_MOUSE("
  DATA 173,"SCRP_WRITE("
  DATA 174,"FSEL_INPUT("
  DATA 177,"WIND_CLOSE("
  DATA 204,"FORM_KEYBD("
  DATA 216,"VQT_EXTENT("
  DATA 108,"V_CLSVWK()"
  DATA 124,"RSRC_LOAD("
  DATA 129,"SHEL_READ("
  DATA 133,"SHEL_FIND("
  DATA 136,"APPL_READ("
  DATA 138,"APPL_FIND("
  DATA 147,"MENU_TEXT("
  DATA 151,"OBJC_DRAW("
  DATA 152,"OBJC_FIND("
  DATA 155,"OBJC_EDIT("
  DATA 158,"FORM_DIAL("
  DATA 172,"SCRP_READ("
  DATA 176,"WIND_OPEN("
  DATA 181,"WIND_FIND("
  DATA 183,"WIND_CALC("
  DATA 99,"W_INDEX(#"
  DATA 106,"V_CLSWK()"
  DATA 107,"V_OPNVWK("
  DATA 109,"V_UPDWK()"
  DATA 131,"SHEL_GET("
  DATA 132,"SHEL_PUT("
  DATA 143,"MENU_BAR("
  DATA 149,"OBJC_ADD("
  DATA 179,"WIND_GET("
  DATA 180,"WIND_SET("
  DATA 196,"OB_FLAGS("
  DATA 197,"OB_STATE("
  DATA 208,"WORK_OUT("
  DATA 214,"V_CLRWK()"
  DATA 215,"VQT_NAME("
  DATA 221,"FGETDTA()"
  DATA 20,"ADDROUT("
  DATA 24,"GCONTRL("
  DATA 28,"GINTOUT("
  DATA 31,"BASEPAGE"
  DATA 41,"WINDTAB("
  DATA 98,"W_HAND(#"
  DATA 105,"V_OPNWK("
  DATA 157,"FORM_DO("
  DATA 186,"MSHRINK("
  DATA 192,"OB_NEXT("
  DATA 193,"OB_HEAD("
  DATA 194,"OB_TAIL("
  DATA 195,"OB_TYPE("
  DATA 198,"OB_SPEC("
  DATA 218,"FSFIRST("
  DATA 219,"FSNEXT()"
  DATA 220,"FSETDTA("
  DATA 239,"GETSIZE("
  DATA 18,"ADDRIN("
  DATA 21,"ADDROUT"
  DATA 22,"CONTRL("
  DATA 25,"GCONTRL"
  DATA 26,"GINTIN("
  DATA 29,"GINTOUT"
  DATA 34,"INTOUT("
  DATA 38,"PTSOUT("
  DATA 40,"VDIBASE"
  DATA 42,"WINDTAB"
  DATA 87,"GEMDOS("
  DATA 184,"MALLOC("
  DATA 187,"VARPTR("
  DATA 188,"ARRPTR("
  DATA 191,"OB_ADR("
  DATA 209,"RINSTR("
  DATA 210,"RINSTR("
  DATA 211,"RINSTR("
  DATA 19,"ADDRIN"
  DATA 23,"CONTRL"
  DATA 27,"GINTIN"
  DATA 32,"INTIN("
  DATA 35,"INTOUT"
  DATA 36,"PTSIN("
  DATA 39,"PTSOUT"
  DATA 56,"CRSLIN"
  DATA 57,"CRSCOL"
  DATA 58,"MOUSEX"
  DATA 59,"MOUSEY"
  DATA 60,"MOUSEK"
  DATA 64,"DPEEK("
  DATA 65,"LPEEK("
  DATA 68,"INSTR("
  DATA 69,"INSTR("
  DATA 70,"INSTR("
  DATA 72,"POINT("
  DATA 83,"DFREE("
  DATA 84,"EXIST("
  DATA 86,"XBIOS("
  DATA 185,"MFREE("
  DATA 206,"STICK("
  DATA 207,"STRIG("
  DATA 224,"INP&(#"
  DATA 226,"INP%(#"
  DATA 235,"SCALE("
  DATA 14,"WORD("
  DATA 15,"CARD("
  DATA 16,"BYTE("
  DATA 17,"SWAP("
  DATA 30,"HIMEM"
  DATA 33,"INTIN"
  DATA 37,"PTSIN"
  DATA 43,"PTST("
  DATA 44,"BTST("
  DATA 45,"BSET("
  DATA 46,"BCLR("
  DATA 47,"BCHG("
  DATA 48,"SHL&("
  DATA 49,"SHR&("
  DATA 50,"ROL&("
  DATA 51,"ROR&("
  DATA 52,"SHL|("
  DATA 53,"SHR|("
  DATA 54,"ROL|("
  DATA 55,"ROR|("
  DATA 62,"TIMER"
  DATA 63,"PEEK("
  DATA 73,"VAL?("
  DATA 77,"INP(#"
  DATA 78,"EOF(#"
  DATA 79,"LOF(#"
  DATA 80,"LOC(#"
  DATA 81,"DIM?("
  DATA 82,"RAND("
  DATA 85,"BIOS("
  DATA 89,"FATAL"
  DATA 91,"LPOS("
  DATA 92,"MENU("
  DATA 93,"INP?("
  DATA 94,"OUT?("
  DATA 95,"EXEC("
  DATA 96,"SUCC("
  DATA 97,"PRED("
  DATA 101,"EVEN("
  DATA 103,"CINT("
  DATA 104,"GDOS?"
  DATA 113,"LONG{"
  DATA 115,"CARD{"
  DATA 116,"BYTE{"
  DATA 190,"TYPE("
  DATA 199,"OB_X("
  DATA 200,"OB_Y("
  DATA 201,"OB_W("
  DATA 202,"OB_H("
  DATA 222,"WORD{"
  DATA 223,"INP&("
  DATA 225,"INP%("
  DATA 227,"_DATA"
  DATA 228,"PADX("
  DATA 229,"PADY("
  DATA 230,"PADT("
  DATA 231,"LPENX"
  DATA 232,"LPENY"
  DATA 0,"MUL("
  DATA 1,"DIV("
  DATA 2,"ADD("
  DATA 3,"SUB("
  DATA 4,"MOD("
  DATA 5,"AND("
  DATA 7,"XOR("
  DATA 8,"EQV("
  DATA 9,"IMP("
  DATA 10,"SHL("
  DATA 11,"SHR("
  DATA 12,"ROL("
  DATA 13,"ROR("
  DATA 66,"LEN("
  DATA 67,"ASC("
  DATA 71,"FRE("
  DATA 74,"INP("
  DATA 75,"CVI("
  DATA 76,"CVL("
  DATA 90,"POS("
  DATA 100,"SGN("
  DATA 102,"ODD("
  DATA 114,"INT{"
  DATA 233,"STE?"
  DATA 6,"OR("
  DATA 88,"ERR"
  DATA 212,"L~A"
  DATA 213,"V~H"
  DATA 234,"TT?"
  DATA 61,"GB"
  DATA 117,"C:"
  DATA 203,"V:"
  DATA 236,"_X"
  DATA 237,"_Y"
  DATA 238,"_C"
  DATA 112,"{"
  DATA 189,"*"
  DATA 240,""
  DATA 241,""
  DATA 242,""
  DATA 243,""
  DATA 244,""
  DATA 245,""
  DATA 246,""
  DATA 247,""
  DATA 248,""
  DATA 249,""
  DATA 250,""
  DATA 251,""
  DATA 252,""
  DATA 253,""
  DATA 254,""
  DATA -1
RETURN
> PROCEDURE gf4tp_token_new     ! -!TP
  ' ++SYM
  max_token&=453
  max_funcs&=196
  max_func2&=254
  ' --SYM
  '
new_token___:
  ' P = Prozedur
  ' A = Ausdruck
  ' V = Variable
  ' F = Feld
  ' S = Syntax-ErgÑnzung
  ' Z = Z-List (bei PRINT)
  ' # = KANAL
  ' $ = String
  ' [ = Optional
  ' < = RÅckgabe
  DATA 536,"ON MENU MESSAGE GOSUB ",P
  DATA 540,"ON MENU KEY GOSUB ",P
  DATA 516,"ON ERROR GOSUB ",P
  DATA 528,"ON BREAK GOSUB ",P
  DATA 544,"ON MENU BUTTON ",
  DATA 532,"ON MENU GOSUB ",P
  DATA 524,"ON BREAK CONT",""
  DATA 952,"ON MENU IBOX ",AtAtAtAS[GOSUB]P
  DATA 956,"ON MENU OBOX ",AtAtAtAS[GOSUB]P
  DATA 204,"LOOP WHILE ",A
  DATA 208,"LOOP UNTIL ",A
  DATA 612,"FORM INPUT ",Z
  DATA 616,"LINE INPUT ",Z
  DATA 1316,"FILESELECT ",[#$t]$t$t<$>
  DATA 1804,"DMACONTROL ",""
  DATA 24,"PROCEDURE ",
  DATA 216,"> PROCEDURE "
  DATA 1020,"RANDOMIZE "
  DATA 1112,"GRAPHMODE "
  DATA 1588,"ARRAYFILL "
  DATA 1676,"VSETCOLOR "
  DATA 1740,"MAT PRINT "
  DATA 1744,"MAT TRANS "
  DATA 1768,"MAT INPUT "
  DATA 40,"FUNCTION "
  DATA 52,"ENDSELECT"
  DATA 196,"DO WHILE "
  DATA 200,"DO UNTIL "
  DATA 564,"MENU KILL"
  DATA 836,"RELSEEK #"
  DATA 844,"SETCOLOR "
  DATA 848,"SETCOLOR "
  DATA 984,"OB_FLAGS("
  DATA 988,"OB_STATE("
  DATA 1012,"ABSOLUTE "
  DATA 1116,"DEFMOUSE "
  DATA 1120,"DEFMOUSE "
  DATA 1188,"PELLIPSE "
  DATA 1192,"PELLIPSE "
  DATA 1388,"POLYLINE "
  DATA 1392,"POLYFILL "
  DATA 1396,"POLYMARK "
  DATA 1496,"SETMOUSE "
  DATA 1516,"KEYPRESS "
  DATA 1548,"BOUNDARY "
  DATA 1716,"MAT XCPY "
  DATA 1732,"MAT NORM "
  DATA 1736,"MAT READ "
  DATA 1760,"MAT BASE "
  DATA 1764,"MAT QDET "
  DATA 1772,"MAT RANG "
  DATA 1796,"FUNCTION "
  DATA 1800,"DMASOUND "
  DATA 64,"ELSE IF "
  DATA 172,"EXIT IF "
  DATA 220,"EXIT IF "
  DATA 236,"RESTORE "
  DATA 416,"RESERVE "
  DATA 512,"ON ERROR"
  DATA 520,"ON BREAK"
  DATA 552,"ON MENU "
  DATA 560,"MENU OFF"
  DATA 900,"ADDROUT("
  DATA 908,"GINTOUT("
  DATA 916,"GCONTRL("
  DATA 968,"OB_NEXT("
  DATA 972,"OB_HEAD("
  DATA 976,"OB_TAIL("
  DATA 980,"OB_TYPE("
  DATA 992,"OB_SPEC("
  DATA 1080,"CLOSEW #"
  DATA 1092,"CLEARW #"
  DATA 1100,"TITLEW #"
  DATA 1108,"DEFLINE "
  DATA 1124,"DEFLIST "
  DATA 1128,"DEFMARK "
  DATA 1136,"DEFTEXT "
  DATA 1140,"DEFFILL "
  DATA 1144,"DEFFILL "
  DATA 1172,"PCIRCLE "
  DATA 1176,"PCIRCLE "
  DATA 1180,"ELLIPSE "
  DATA 1184,"ELLIPSE "
  DATA 1248,"CHDRIVE "
  DATA 1252,"CHDRIVE "
  DATA 1344,"SETTIME "
  DATA 1372,"HARDCOPY"
  DATA 1504,"KEYTEST "
  DATA 1512,"KEYLOOK "
  DATA 1584,"SETDRAW "
  DATA 1648,"WINDTAB("
  DATA 1652,"RC_COPY "
  DATA 1696,"MAT ADD "
  DATA 1700,"MAT ADD "
  DATA 1704,"MAT SUB "
  DATA 1708,"MAT SUB "
  DATA 1712,"MAT CPY "
  DATA 1720,"MAT DET "
  DATA 1748,"MAT CLR "
  DATA 1752,"MAT SET "
  DATA 1756,"MAT ONE "
  DATA 1776,"MAT MUL "
  DATA 1780,"MAT MUL "
  DATA 1784,"MAT MUL "
  DATA 1788,"MAT MUL "
  DATA 1792,"MAT INV "
  DATA 44,"ENDFUNC"
  DATA 48,"SELECT "
  DATA 60,"DEFAULT"
  DATA 68,"RETURN "
  DATA 72,"RETURN "
  DATA 176,"SELECT "
  DATA 404,"SDPOKE "
  DATA 408,"SLPOKE "
  DATA 412,"RESERVE"
  DATA 420,"RESUME "
  DATA 424,"RESUME "
  DATA 428,"RESUME "
  DATA 436,"RECORD "
  DATA 492,"SINGLE{"
  DATA 500,"LOCATE "
  DATA 548,"ON MENU"
  DATA 856,"VDISYS "
  DATA 860,"VDISYS "
  DATA 864,"VDISYS "
  DATA 868,"VDISYS "
  DATA 876,"GEMSYS "
  DATA 884,"PTSOUT("
  DATA 892,"INTOUT("
  DATA 896,"ADDRIN("
  DATA 904,"GINTIN("
  DATA 912,"CONTRL("
  DATA 948,"DOUBLE{"
  DATA 1068,"OPENW #"
  DATA 1076,"CLOSEW "
  DATA 1088,"CLEARW "
  DATA 1104,"INFOW #"
  DATA 1132,"DEFNUM "
  DATA 1164,"CIRCLE "
  DATA 1168,"CIRCLE "
  DATA 1212,"LPRINT "
  DATA 1304,"TOUCH #"
  DATA 1364,"SYSTEM "
  DATA 1400,"INSERT "
  DATA 1404,"DELETE "
  DATA 1408,"RENAME "
  DATA 1500,"KEYPAD "
  DATA 1508,"KEYGET "
  DATA 1520,"KEYDEF "
  DATA 1524,"DEFINT "
  DATA 1528,"DEFFLT "
  DATA 1532,"DEFBYT "
  DATA 1536,"DEFWRD "
  DATA 1540,"DEFBIT "
  DATA 1544,"DEFSTR "
  DATA 1596,"BITBLT "
  DATA 1600,"BITBLT "
  DATA 1604,"BITBLT "
  DATA 1612,"RECALL "
  DATA 1636,"SPRITE "
  DATA 1640,"OPTION "
  DATA 1668,"INLINE "
  DATA 1692,"_DATA= "
  DATA 1808,"MW_OUT "
  DATA 8,"REPEAT"
  DATA 12,"UNTIL "
  DATA 16,"WHILE "
  DATA 28,"RETURN"
  DATA 212,"LOCAL "
  DATA 228,"DEFFN "
  DATA 244,"GOSUB "
  DATA 360,"ALINE "
  DATA 364,"HLINE "
  DATA 368,"ARECT "
  DATA 372,"APOLY "
  DATA 376,"ACHAR "
  DATA 380,"ACLIP "
  DATA 384,"COLOR "
  DATA 392,"DPOKE "
  DATA 396,"LPOKE "
  DATA 400,"SPOKE "
  DATA 440,"DELAY "
  DATA 452,"ATEXT "
  DATA 588,"PRINT "
  DATA 592,"PRINT "
  DATA 604,"RCALL "
  DATA 832,"SEEK #"
  DATA 852,"BMOVE "
  DATA 872,"GEMSYS"
  DATA 880,"PTSIN("
  DATA 888,"INTIN("
  DATA 944,"FLOAT{"
  DATA 1024,"ALERT "
  DATA 1064,"OPENW "
  DATA 1072,"CLOSE "
  DATA 1096,"TOPW #"
  DATA 1160,"PRBOX "
  DATA 1196,"ERROR "
  DATA 1244,"CHDIR "
  DATA 1288,"ERASE "
  DATA 1296,"FIELD "
  DATA 1300,"FILES "
  DATA 1324,"MKDIR "
  DATA 1328,"MOUSE "
  DATA 1336,"RMDIR "
  DATA 1376,"PAUSE "
  DATA 1380,"QSORT "
  DATA 1384,"SSORT "
  DATA 1412,"STICK "
  DATA 1416,"SOUND "
  DATA 1444,"FULLW "
  DATA 1448,"EVERY "
  DATA 1452,"EVERY "
  DATA 1456,"EVERY "
  DATA 1460,"AFTER "
  DATA 1464,"AFTER "
  DATA 1468,"AFTER "
  DATA 1472,"INPUT "
  DATA 1476,"INPUT "
  DATA 1556,"LLIST "
  DATA 1564,"PSAVE "
  DATA 1568,"CHAIN "
  DATA 1608,"STORE "
  DATA 1616,"BSAVE "
  DATA 1620,"BLOAD "
  DATA 1628,"TIME$="
  DATA 1632,"DATE$="
  DATA 1664,"WRITE "
  DATA 1688,"CURVE "
  DATA 36,"ENDIF"
  DATA 124,"NEXT "
  DATA 128,"NEXT "
  DATA 132,"NEXT "
  DATA 136,"NEXT "
  DATA 140,"NEXT "
  DATA 144,"NEXT "
  DATA 148,"NEXT "
  DATA 152,"NEXT "
  DATA 156,"NEXT "
  DATA 160,"NEXT "
  DATA 164,"NEXT "
  DATA 168,"NEXT "
  DATA 224,"CASE "
  DATA 232,"GOTO "
  DATA 352,"PLOT "
  DATA 356,"PSET "
  DATA 388,"POKE "
  DATA 444,"BGET "
  DATA 448,"BPUT "
  DATA 468,"DATA "
  DATA 472,"SWAP "
  DATA 476,"SWAP "
  DATA 480,"SWAP "
  DATA 556,"MENU "
  DATA 568,"MENU "
  DATA 572,"TRON "
  DATA 576,"TRON "
  DATA 580,"TRON "
  DATA 584,"TROFF"
  DATA 596,"TEXT "
  DATA 600,"TEXT "
  DATA 608,"CALL "
  DATA 620,"LINE "
  DATA 924,"LONG{"
  DATA 932,"CARD{"
  DATA 936,"BYTE{"
  DATA 940,"CHAR{"
  DATA 960,"VOID "
  DATA 996,"OB_X("
  DATA 1000,"OB_Y("
  DATA 1004,"OB_W("
  DATA 1008,"OB_H("
  DATA 1060,"OPEN "
  DATA 1084,"CLEAR"
  DATA 1152,"PBOX "
  DATA 1156,"RBOX "
  DATA 1200,"FILL "
  DATA 1204,"FILL "
  DATA 1208,"HIDEM"
  DATA 1216,"LSET "
  DATA 1220,"MID$("
  DATA 1236,"QUIT "
  DATA 1280,"HTAB "
  DATA 1284,"VTAB "
  DATA 1292,"EXEC "
  DATA 1320,"NAME "
  DATA 1332,"KILL "
  DATA 1340,"RSET "
  DATA 1348,"SGET "
  DATA 1352,"SHOWM"
  DATA 1356,"SPUT "
  DATA 1368,"VSYNC"
  DATA 1420,"WAVE "
  DATA 1424,"CLIP "
  DATA 1428,"CLIP "
  DATA 1432,"CLIP "
  DATA 1436,"CLIP "
  DATA 1440,"CLIP "
  DATA 1480,"DRAW "
  DATA 1484,"DRAW "
  DATA 1488,"READ "
  DATA 1552,"LIST "
  DATA 1560,"SAVE "
  DATA 1580,"LOAD "
  DATA 1592,"DUMP "
  DATA 1656,"MODE "
  DATA 1672,"WORD{"
  DATA 1680,"OUT& "
  DATA 1684,"OUT% "
  DATA 4,"LOOP"
  DATA 20,"WEND"
  DATA 56,"ELSE"
  DATA 76,"FOR "
  DATA 80,"FOR "
  DATA 84,"FOR "
  DATA 88,"FOR "
  DATA 92,"FOR "
  DATA 96,"FOR "
  DATA 100,"FOR "
  DATA 104,"FOR "
  DATA 108,"FOR "
  DATA 112,"FOR "
  DATA 116,"FOR "
  DATA 120,"FOR "
  DATA 256,"LET "
  DATA 260,"LET "
  DATA 264,"LET "
  DATA 268,"LET "
  DATA 272,"LET "
  DATA 276,"LET "
  DATA 280,"LET "
  DATA 284,"LET "
  DATA 288,"LET "
  DATA 292,"LET "
  DATA 296,"LET "
  DATA 300,"LET "
  DATA 456,"REM "
  DATA 464,"==> "
  DATA 640,"INC "
  DATA 644,"INC "
  DATA 648,"INC "
  DATA 652,"INC "
  DATA 656,"INC "
  DATA 660,"INC "
  DATA 664,"INC "
  DATA 668,"INC "
  DATA 672,"DEC "
  DATA 676,"DEC "
  DATA 680,"DEC "
  DATA 684,"DEC "
  DATA 688,"DEC "
  DATA 692,"DEC "
  DATA 696,"DEC "
  DATA 700,"DEC "
  DATA 704,"ADD "
  DATA 708,"ADD "
  DATA 712,"ADD "
  DATA 716,"ADD "
  DATA 720,"ADD "
  DATA 724,"ADD "
  DATA 728,"ADD "
  DATA 732,"ADD "
  DATA 736,"SUB "
  DATA 740,"SUB "
  DATA 744,"SUB "
  DATA 748,"SUB "
  DATA 752,"SUB "
  DATA 756,"SUB "
  DATA 760,"SUB "
  DATA 764,"SUB "
  DATA 768,"MUL "
  DATA 772,"MUL "
  DATA 776,"MUL "
  DATA 780,"MUL "
  DATA 784,"MUL "
  DATA 788,"MUL "
  DATA 792,"MUL "
  DATA 796,"MUL "
  DATA 800,"DIV "
  DATA 804,"DIV "
  DATA 808,"DIV "
  DATA 812,"DIV "
  DATA 816,"DIV "
  DATA 820,"DIV "
  DATA 824,"DIV "
  DATA 828,"DIV "
  DATA 840,"DIM "
  DATA 928,"INT{"
  DATA 1028,"GET "
  DATA 1032,"GET "
  DATA 1036,"GET "
  DATA 1040,"PUT "
  DATA 1044,"PUT "
  DATA 1048,"PUT "
  DATA 1052,"PUT "
  DATA 1148,"BOX "
  DATA 1228,"OUT "
  DATA 1232,"OUT "
  DATA 1256,"CLR "
  DATA 1260,"CLS "
  DATA 1268,"CONT"
  DATA 1276,"DIR "
  DATA 1312,"EDIT"
  DATA 1360,"STOP"
  DATA 1576,"RUN "
  DATA 1624,"V~H="
  DATA 32,"IF "
  DATA 496,"END"
  DATA 504,"ON "
  DATA 1224,"NEW"
  DATA 1572,"RUN"
  DATA 460,"' "
  DATA 248,"@"
  DATA 484,"*"
  DATA 488,"*"
  DATA 920,"{"
  DATA 964,"~"
  DATA 1016,"."
  DATA 1644,"$"
  DATA 1660,""
  DATA 1724,""
  DATA 1728,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA 0,""
  DATA -1
  ' ---
  DATA 73," DOWNTO "
  DATA 109," OFFSET "
  DATA 129,"STRING$("
  DATA 130,"STRING$("
  DATA 52,"INPAUX$"
  DATA 54,"INPMID$"
  DATA 60,"RIGHT$("
  DATA 61,"RIGHT$("
  DATA 76," GOSUB "
  DATA 86,"RANDOM("
  DATA 93,"DOUBLE{"
  DATA 94,"INPUT$("
  DATA 95,"INPUT$("
  DATA 110,"CFLOAT("
  DATA 121,"SINGLE{"
  DATA 127,"UPPER$("
  DATA 128,"SPACE$("
  DATA 141,"COMBIN("
  DATA 143,"VARIAT("
  DATA 174,"MESSAGE"
  DATA 38,"TRUNC("
  DATA 49,"LOG10("
  DATA 58,"LEFT$("
  DATA 59,"LEFT$("
  DATA 72," STEP "
  DATA 75," GOTO "
  DATA 83,"INKEY$"
  DATA 92,"FLOAT{"
  DATA 111,"TRACE$"
  DATA 112,"ROUND("
  DATA 113,"ROUND("
  DATA 114," WITH "
  DATA 135,"TRIM$("
  DATA 163,"USING "
  DATA 171,"BUTTON"
  DATA 0," AND "
  DATA 2," XOR "
  DATA 3," IMP "
  DATA 4," EQV "
  DATA 10," MOD "
  DATA 11," DIV "
  DATA 36,"ERR$("
  DATA 39,"FRAC("
  DATA 56,"TIME$"
  DATA 62,"MID$("
  DATA 63,"MID$("
  DATA 65,"ASIN("
  DATA 66,"CHR$("
  DATA 74," THEN"
  DATA 82,"ACOS("
  DATA 96,"INPUT"
  DATA 97,"CHAR{"
  DATA 98,"MKI$("
  DATA 99,"MKL$("
  DATA 100,"MKS$("
  DATA 101,"MKF$("
  DATA 102,"MKD$("
  DATA 115,"BIN$("
  DATA 116,"BIN$("
  DATA 123,"SINQ("
  DATA 125,"COSQ("
  DATA 126,"DATE$"
  DATA 131,"SUCC("
  DATA 132,"DIR$("
  DATA 133,"PRED("
  DATA 134,"DRAW("
  DATA 140,"FACT("
  DATA 151,"ERROR"
  DATA 153,"BREAK"
  DATA 154," CONT"
  DATA 182,"BASE "
  DATA 189,"FALSE"
  DATA 190,"STR$("
  DATA 191,"STR$("
  DATA 192,"STR$("
  DATA 193,"HEX$("
  DATA 194,"HEX$("
  DATA 195,"OCT$("
  DATA 196,"OCT$("
  DATA 1," OR "
  DATA 31,"NOT "
  DATA 37,"INT("
  DATA 40,"ABS("
  DATA 41,"SIN("
  DATA 42,"COS("
  DATA 43,"TAN("
  DATA 44,"ATN("
  DATA 47,"EXP("
  DATA 48,"LOG("
  DATA 50,"VAR "
  DATA 53,"VAL("
  DATA 71," TO "
  DATA 78,"SQR("
  DATA 84,"RND("
  DATA 103,"DEG("
  DATA 104,"RAD("
  DATA 105,"CVS("
  DATA 106,"CVF("
  DATA 107,"CVD("
  DATA 108," AS "
  DATA 117,"MIN("
  DATA 118,"MIN("
  DATA 119,"MAX("
  DATA 120,"MAX("
  DATA 122," AT("
  DATA 152,"STOP"
  DATA 155,"FIX("
  DATA 161,"TAB("
  DATA 162,"SPC("
  DATA 167,"MENU"
  DATA 168,"NEXT"
  DATA 172,"IBOX"
  DATA 173,"OBOX"
  DATA 176,"KILL"
  DATA 188,"TRUE"
  DATA 85,"RND"
  DATA 89,"AT("
  DATA 158,"FN "
  DATA 170,"KEY"
  DATA 175,"OFF"
  DATA 12,"<>"
  DATA 13,"<="
  DATA 14,"=<"
  DATA 15,">="
  DATA 16,"=>"
  DATA 20,"<>"
  DATA 21,"<="
  DATA 22,"=<"
  DATA 23,">="
  DATA 24,"=>"
  DATA 45,"=="
  DATA 67,"}="
  DATA 79,"PI"
  DATA 90,"IF"
  DATA 138,"L:"
  DATA 139,"W:"
  DATA 57,","   ! -- ++
  DATA 5,"-"
  DATA 6,"+"
  DATA 7,"*"
  DATA 8,"/"
  DATA 9,"^"
  DATA 17,"<"
  DATA 18,">"
  DATA 19,"="
  DATA 25,"<"
  DATA 26,">"
  DATA 27,"="
  DATA 28,"+"
  DATA 29,"+"
  DATA 30,"-"
  DATA 32,")"
  DATA 33,","
  '
  DATA 34,";"
  DATA 35,"("
  DATA 51,")"
  DATA 69,"="
  DATA 77,"#"
  DATA 80,"["
  DATA 81,"]"
  DATA 87,"'"
  DATA 88,"}"
  DATA 91,"\"
  DATA 124,":"
  DATA 156,","
  DATA 157,"("
  DATA 159,"@"
  DATA 184,"0"
  DATA 185,"1"
  DATA 186,""
  DATA 187,""
  DATA 197,""
  DATA 198,""
  DATA 199,""
  DATA 200,""
  DATA 201,""
  DATA 202,""
  DATA 203,""
  DATA 204,""
  DATA 205,""
  DATA 206,""
  DATA 207,""
  DATA 208,""
  DATA 209,""
  DATA 210,""
  DATA 211,""
  DATA 212,""
  DATA 213,""
  DATA 214,""
  DATA 215,""
  DATA 216,""
  DATA 217,""
  DATA 218,""
  DATA 219,""
  DATA 220,""
  DATA 221,""
  DATA 222,""
  DATA -1
  ' ---
  DATA 111,"VST_UNLOAD_FONTS("
  DATA 110,"VST_LOAD_FONTS("
  DATA 162,"GRAF_RUBBERBOX("
  DATA 166,"GRAF_SHRINKBOX("
  DATA 148,"MENU_REGISTER("
  DATA 167,"GRAF_WATCHBOX("
  DATA 168,"GRAF_SLIDEBOX("
  DATA 140,"APPL_TRECORD("
  DATA 145,"MENU_IENABLE("
  DATA 146,"MENU_TNORMAL("
  DATA 163,"GRAF_DRAGBOX("
  DATA 164,"GRAF_MOVEBOX("
  DATA 165,"GRAF_GROWBOX("
  DATA 171,"GRAF_MKSTATE("
  DATA 217,"RC_INTERSECT("
  DATA 118,"EVNT_KEYBD()"
  DATA 119,"EVNT_BUTTON("
  DATA 142,"EVNT_DCLICK("
  DATA 144,"MENU_ICHECK("
  DATA 150,"OBJC_DELETE("
  DATA 153,"OBJC_OFFSET("
  DATA 156,"OBJC_CHANGE("
  DATA 161,"FORM_CENTER("
  DATA 169,"GRAF_HANDLE("
  DATA 175,"WIND_CREATE("
  DATA 178,"WIND_DELETE("
  DATA 182,"WIND_UPDATE("
  DATA 205,"FORM_BUTTON("
  DATA 120,"EVNT_MOUSE("
  DATA 121,"EVNT_MESAG("
  DATA 122,"EVNT_TIMER("
  DATA 123,"EVNT_MULTI("
  DATA 125,"RSRC_FREE()"
  DATA 126,"RSRC_GADDR("
  DATA 127,"RSRC_SADDR("
  DATA 128,"RSRC_OBFIX("
  DATA 130,"SHEL_WRITE("
  DATA 134,"SHEL_ENVRN("
  DATA 135,"APPL_INIT()"
  DATA 137,"APPL_WRITE("
  DATA 139,"APPL_TPLAY("
  DATA 141,"APPL_EXIT()"
  DATA 154,"OBJC_ORDER("
  DATA 159,"FORM_ALERT("
  DATA 160,"FORM_ERROR("
  DATA 170,"GRAF_MOUSE("
  DATA 173,"SCRP_WRITE("
  DATA 174,"FSEL_INPUT("
  DATA 177,"WIND_CLOSE("
  DATA 204,"FORM_KEYBD("
  DATA 216,"VQT_EXTENT("
  DATA 108,"V_CLSVWK()"
  DATA 124,"RSRC_LOAD("
  DATA 129,"SHEL_READ("
  DATA 133,"SHEL_FIND("
  DATA 136,"APPL_READ("
  DATA 138,"APPL_FIND("
  DATA 147,"MENU_TEXT("
  DATA 151,"OBJC_DRAW("
  DATA 152,"OBJC_FIND("
  DATA 155,"OBJC_EDIT("
  DATA 158,"FORM_DIAL("
  DATA 172,"SCRP_READ("
  DATA 176,"WIND_OPEN("
  DATA 181,"WIND_FIND("
  DATA 183,"WIND_CALC("
  DATA 99,"W_INDEX(#"
  DATA 106,"V_CLSWK()"
  DATA 107,"V_OPNVWK("
  DATA 109,"V_UPDWK()"
  DATA 131,"SHEL_GET("
  DATA 132,"SHEL_PUT("
  DATA 143,"MENU_BAR("
  DATA 149,"OBJC_ADD("
  DATA 179,"WIND_GET("
  DATA 180,"WIND_SET("
  DATA 196,"OB_FLAGS("
  DATA 197,"OB_STATE("
  DATA 208,"WORK_OUT("
  DATA 214,"V_CLRWK()"
  DATA 215,"VQT_NAME("
  DATA 221,"FGETDTA()"
  DATA 20,"ADDROUT("
  DATA 24,"GCONTRL("
  DATA 28,"GINTOUT("
  DATA 31,"BASEPAGE"
  DATA 41,"WINDTAB("
  DATA 98,"W_HAND(#"
  DATA 105,"V_OPNWK("
  DATA 157,"FORM_DO("
  DATA 186,"MSHRINK("
  DATA 192,"OB_NEXT("
  DATA 193,"OB_HEAD("
  DATA 194,"OB_TAIL("
  DATA 195,"OB_TYPE("
  DATA 198,"OB_SPEC("
  DATA 218,"FSFIRST("
  DATA 219,"FSNEXT()"
  DATA 220,"FSETDTA("
  DATA 239,"GETSIZE("
  DATA 18,"ADDRIN("
  DATA 21,"ADDROUT"
  DATA 22,"CONTRL("
  DATA 25,"GCONTRL"
  DATA 26,"GINTIN("
  DATA 29,"GINTOUT"
  DATA 34,"INTOUT("
  DATA 38,"PTSOUT("
  DATA 40,"VDIBASE"
  DATA 42,"WINDTAB"
  DATA 87,"GEMDOS("
  DATA 184,"MALLOC("
  DATA 187,"VARPTR("
  DATA 188,"ARRPTR("
  DATA 191,"OB_ADR("
  DATA 209,"RINSTR("
  DATA 210,"RINSTR("
  DATA 211,"RINSTR("
  DATA 19,"ADDRIN"
  DATA 23,"CONTRL"
  DATA 27,"GINTIN"
  DATA 32,"INTIN("
  DATA 35,"INTOUT"
  DATA 36,"PTSIN("
  DATA 39,"PTSOUT"
  DATA 56,"CRSLIN"
  DATA 57,"CRSCOL"
  DATA 58,"MOUSEX"
  DATA 59,"MOUSEY"
  DATA 60,"MOUSEK"
  DATA 64,"DPEEK("
  DATA 65,"LPEEK("
  DATA 68,"INSTR("
  DATA 69,"INSTR("
  DATA 70,"INSTR("
  DATA 72,"POINT("
  DATA 83,"DFREE("
  DATA 84,"EXIST("
  DATA 86,"XBIOS("
  DATA 185,"MFREE("
  DATA 206,"STICK("
  DATA 207,"STRIG("
  DATA 224,"INP&(#"
  DATA 226,"INP%(#"
  DATA 235,"SCALE("
  DATA 14,"WORD("
  DATA 15,"CARD("
  DATA 16,"BYTE("
  DATA 17,"SWAP("
  DATA 30,"HIMEM"
  DATA 33,"INTIN"
  DATA 37,"PTSIN"
  DATA 43,"PTST("
  DATA 44,"BTST("
  DATA 45,"BSET("
  DATA 46,"BCLR("
  DATA 47,"BCHG("
  DATA 48,"SHL&("
  DATA 49,"SHR&("
  DATA 50,"ROL&("
  DATA 51,"ROR&("
  DATA 52,"SHL|("
  DATA 53,"SHR|("
  DATA 54,"ROL|("
  DATA 55,"ROR|("
  DATA 62,"TIMER"
  DATA 63,"PEEK("
  DATA 73,"VAL?("
  DATA 77,"INP(#"
  DATA 78,"EOF(#"
  DATA 79,"LOF(#"
  DATA 80,"LOC(#"
  DATA 81,"DIM?("
  DATA 82,"RAND("
  DATA 85,"BIOS("
  DATA 89,"FATAL"
  DATA 91,"LPOS("
  DATA 92,"MENU("
  DATA 93,"INP?("
  DATA 94,"OUT?("
  DATA 95,"EXEC("
  DATA 96,"SUCC("
  DATA 97,"PRED("
  DATA 101,"EVEN("
  DATA 103,"CINT("
  DATA 104,"GDOS?"
  DATA 113,"LONG{"
  DATA 115,"CARD{"
  DATA 116,"BYTE{"
  DATA 190,"TYPE("
  DATA 199,"OB_X("
  DATA 200,"OB_Y("
  DATA 201,"OB_W("
  DATA 202,"OB_H("
  DATA 222,"WORD{"
  DATA 223,"INP&("
  DATA 225,"INP%("
  DATA 227,"_DATA"
  DATA 228,"PADX("
  DATA 229,"PADY("
  DATA 230,"PADT("
  DATA 231,"LPENX"
  DATA 232,"LPENY"
  DATA 0,"MUL("
  DATA 1,"DIV("
  DATA 2,"ADD("
  DATA 3,"SUB("
  DATA 4,"MOD("
  DATA 5,"AND("
  DATA 7,"XOR("
  DATA 8,"EQV("
  DATA 9,"IMP("
  DATA 10,"SHL("
  DATA 11,"SHR("
  DATA 12,"ROL("
  DATA 13,"ROR("
  DATA 66,"LEN("
  DATA 67,"ASC("
  DATA 71,"FRE("
  DATA 74,"INP("
  DATA 75,"CVI("
  DATA 76,"CVL("
  DATA 90,"POS("
  DATA 100,"SGN("
  DATA 102,"ODD("
  DATA 114,"INT{"
  DATA 233,"STE?"
  DATA 6,"OR("
  DATA 88,"ERR"
  DATA 212,"L~A"
  DATA 213,"V~H"
  DATA 234,"TT?"
  DATA 61,"GB"
  DATA 117,"C:"
  DATA 203,"V:"
  DATA 236,"_X"
  DATA 237,"_Y"
  DATA 238,"_C"
  DATA 112,"{"
  DATA 189,"*"
  DATA 240,""
  DATA 241,""
  DATA 242,""
  DATA 243,""
  DATA 244,""
  DATA 245,""
  DATA 246,""
  DATA 247,""
  DATA 248,""
  DATA 249,""
  DATA 250,""
  DATA 251,""
  DATA 252,""
  DATA 253,""
  DATA 254,""
  DATA -1
RETURN
'
> PROCEDURE gf4pt_whaeder(c|,adr%,len%)
  LOCAL i&
  @gf4pt_output("Schreibe Haeder")
  OUT #c|,0,4
  PRINT #c|,"GFA-BASIC3";
  @gf4pt_output("  Schreibe GI-Block")
  FOR i&=1 TO 38                ! Haeder schreiben
    OUT% #c|,p%(i&)
  NEXT i&
  @gf4pt_output("  Schreibe DI-Block")
  BPUT #c|,adr%,len%
RETURN
> FUNCTION gf4pt_makevar(ll%,VAR len%)
  LOCAL i&,j&,l|,adr%,loc%,var_len%
  ARRAYFILL len%(),0
  ARRAYFILL anz&(),0
  FOR i&=1 TO 16
    CLR j&
    DO
      INC j&
      l|=LEN(var$(i&,j&))
      EXIT IF l|=0                      ! <<-< Exit
      ADD var_len%,var|(i&)
      @gf4pt_debug("010 gf4pt_makevar() Eine Variable als "+STR$(i&)+", Name ist "+var$(i&,j&))
      ADD len%(i&),SUCC(l|)
      INC anz&(i&)
    LOOP
    ADD len%,len%(i&)
  NEXT i&
  adr%=MALLOC(ADD(len%,16))             ! Plus 16 evt. FÅllbytes
  IF adr%>0
    loc%=adr%
    FOR i&=1 TO 16
      CLR j&
      DO
        INC j&
        l|=LEN(var$(i&,j&))
        EXIT IF l|=0                    ! <<-< Exit
        BYTE{loc%}=l|
        BMOVE V:var$(i&,j&),SUCC(loc%),l|
        ADD loc%,SUCC(l|)
      LOOP
      IF ODD(loc%)
        INC loc%
        INC len%(i&)
        INC len%
      ENDIF
    NEXT i&
    ' Sicherheitsabfrage len%=loc% hier?
    @gf4pt_debug("601 gf4pt_makevar len%="+STR$(ADD(len%,adr%))+", loc%="+STR$(loc%))
    p%(0)=0
    p%(20)=ADD(ll%,len%)
    FOR i&=2 TO 17
      p%(i&)=ADD(p%(PRED(i&)),len%(PRED(i&)))
      p%(ADD(i&,19))=ADD(p%(ADD(i&,18)),MUL(anz&(PRED(i&)),4))
      '       [[[ ^ Nicht 18 (Pointer auf Anfang der _nexten_ Var-Art wird
      '           gesetzt. Anfang Var-Tabelle = Ende Andresstabelle!) ]]]
    NEXT i&
    p%(18)=ADD(p%(17),0)        ! Programm-Zeile
    p%(19)=ADD(p%(18),0)        ! Erste sichtbare Zeile
    p%(37)=ADD(p%(36),var_len%) ! Hinter Var-Bereich auf ??-Bereich
    p%(38)=ADD(p%(37),0)        ! Hinter ??-Bereich
    RETURN adr%
  ELSE
    @gf4pt_debug("001 gf4pt_makevar() Zu wenig Speicher @ "+STR$(len%))
    RETURN -1
  ENDIF
ENDFUNC
'       --------------------------------------------------------------
' Diese Routine sortiert die Tokens der LÑnge nach. Die ist notwendig, da
' ja ein kleinerer String der Anfang eines Grîûeren sein kann (z.B.
' "DO " und "DO WHILE ")
' --!TP
> PROCEDURE sortiere_tokens
  LOCAL z&,i&,anz&,n&,max&,x&,j&
  DIM var$(1024),var&(1024),fnk$(1024),fnk2$(1024) !,var2$(1024),var2&(1024)
  @gf4tp_token
  REPEAT
    READ z&
    IF z&>-1
      INC anz&
      var&(DIV(z&,4))=z&
      READ var$(DIV(z&,4))
    ENDIF
  UNTIL z&=-1
  CLR z&
  OPEN "O",#1,"D:\SORT.LST"
  n&=anz&
  FOR i&=1 TO anz&
    CLR max&
    FOR j&=1 TO n&
      IF LEN(var$(j&))>max&
        x&=j&
        max&=LEN(var$(j&))
      ENDIF
    NEXT j&
    PRINT AT(1,1),i&
    DEC n&
    ' var2$(i&)=var$(x&)
    ' var2&(i&)=var&(x&)
    PRINT #1,"DATA "+STR$(var&(x&))+","+CHR$(34)+var$(x&)+CHR$(34)
    DELETE var$(x&)
    DELETE var&(x&)
  NEXT i&
  ' 0-196,0-254
  n&=196
  FOR i&=0 TO 254
    var&(i&)=i&
  NEXT i&
  FOR i&=0 TO 196
    CLR max&
    FOR j&=0 TO n&
      IF LEN(fnk$(j&))>max&
        x&=j&
        max&=LEN(fnk$(j&))
      ENDIF
    NEXT j&
    PRINT AT(1,2),i&
    DEC n&
    PRINT #1,"fnk$("+STR$(var&(x&))+")="+CHR$(34)+fnk$(x&)+CHR$(34)
    DELETE fnk$(x&)
    DELETE var&(x&)
  NEXT i&
  n&=254
  FOR i&=0 TO 254
    var&(i&)=i&
  NEXT i&
  FOR i&=0 TO 254
    CLR max&
    FOR j&=0 TO n&
      IF LEN(fnk2$(j&))>max&
        x&=j&
        max&=LEN(fnk2$(j&))
      ENDIF
    NEXT j&
    PRINT AT(1,3),i&
    DEC n&
    PRINT #1,"fnk2$("+STR$(var&(x&))+")="+CHR$(34)+fnk2$(x&)+CHR$(34)
    DELETE fnk2$(x&)
    DELETE var&(x&)
  NEXT i&
  CLOSE #1
RETURN
> PROCEDURE anmerkungen
  ' Telefonat mit Christof:
  ' ~ Sind auch bei Compileranweisungen z.B. $S>S&m68000 erlaubt?
  '   (Vielleicht mal ausprobieren!)
  ' ~ Letzte Fehler in der ERGO! Bug-liste!
  ' ~ ERGO_HLP.HLP ins ST-Guide Format gewandelt.
  ' ~ ERGO_HELP-Stellen in dem Hypertext GFABASIC.HYP erlaubt?
  ' ~ Warum gibt es jedes FOR und NEXT drei mal?
  ' ~ Nein, 4-Byte Konstanten treten nicht nur im CASE-Zweig auf,
  '   sondern auch bei z.B. "OPENW 1"
  ' --OK
  ' ~ Wie UnFreeze ich einen MagiC-Prozess ++ Holger Weets oder Gregor fragen
  ' ~ Fehler im Bugsic, >> __ERROR.GFA ++ OK, klappt auch bei ihm.
  ' ~ Letzte Bugs ++ Screenshot schicken
  ' ~ Token-Problem: Warum kommt z.B. "-" doppelt vor?:
  '   3mal * (=Pointer+MUL+?), <>, =>, >=, <=, =<, ",", +, <, >, =, ), (
  '   ++ Diverses, Vergleichsoperatoren jeweils fÅr String + Normal.
  ' ~ (Optimierungen im ERGO_TP)
  '
  ' ----------------------------------------------------------------------------
  ' 1 = x# [TYPE(*x#)]
  ' 2 = x$ [TYPE(*x$)]
  ' 3 = x% [TYPE(*x%)]
  ' 4 = x! [TYPE(*x!)]
  ' 5 = x#() [TYPE(*x#())]
  ' 6 = x$() [TYPE(*x$())]
  ' 7 = x%() [TYPE(*x%())]
  ' 8 = x!() [TYPE(*x!())]
  ' 9 = x& [TYPE(*x&)]
  ' 10 = x| [TYPE(*x|)]
  ' 11 = x:; z.B. bei GOTO a
  ' 12 = PROCEDURE x; z.B. bei ON x GOSUB a,b,c...
  ' 13 = x&() [TYPE(*x&())]
  ' 14 = x|() [TYPE(*x|())]
  ' 15 = FUNCTION x/DEFFN x
  ' 16 = FUNCTION x$/DEFFN x$
  ' ----------------------------------------------------------------------------
  ' Zeilenaufbau:
  ' LONG "Zeiger auf vorherige Zeile"
  ' LONG "Zeiger auf nÑchste Zeile"
  ' BYTE "LÑnge"
  ' BYTE "Bitfeld"                    !! BIT 1=INLINE / Rest reserviert
  ' WORD "Schachtelungstiefe"
  ' CHAR "Listing"[255]
  ' ----------------------------------------------------------------------------
  ' >> Keine simple Syntaxkontrolle: !SC
  ' ----------------------------------------------------------------------------
  ' Ideen:
  ' * Wie wÑrs mit einem LÑngenoptimierer, der alle 8-Bytes wenn mîglich
  '   in 4-Byte Konstanten verwandelt (Wird ja normalerweise nur in
  '   CASE gebraucht)
  ' * Wie wÑre es mit einem Abspeichern MIT Variableninhalten? Der Inter-
  '   preter sieht das theoretisch vor (auch wenn es unbewuût war) und ent-
  '   sprechende Offsets existieren ja auch, zeigen nur bis jetzt hinter
  '   Dateiende. Wie wÑrs, wenn sie auf die Inhalte zeigen wÅrden?
  ' * Es mÅsste noch ein Longwort in den Zeilenaufbau, wegen dem INLINE
  '   (vielleicht) und dem Schachteln von z.B. IF, das auf die Zeile "ENDIF"
  '   zeigt
  ' * In der Terminator-Zeile vielleicht doch noch ein Ende-Byte anhÑngen?
  ' ----------------------------------------------------------------------------
  ' Aufbau einer GFA-Datei:
  ' -----------------------
  ' Block-Inhalt:       LÑnge:          Offset:         Bemerkung:
  ' -------------       ------          -------         ----------
  ' PSAVE-Flag          1               0               0 = OK, 255 = PSAVE
  ' Divider             1               1               oder LONG-LÑnge
  ' Kennung             10              2               "GFA-BASIC3"
  ' Pointer             38*4=152        12              Bezeichne p1,p2,...
  ' Var-Namen           p17-p1(=p17)    164
  ' Programmcode        p19             164+p17
  '
  ' Offset-Pointer:
  ' ---------------
  ' Die Zeiger geben den Offset auf die Adresse 164 (ab Filebeginn) wieder.
  ' Nr.         Bedeutung
  ' ---         ---------
  ' 1-16:       Namen der Variablen (16 Gruppen). p1 ist immer Null.
  ' 17 :        Erste Programmzeile
  ' 18 :        Nummer der ersten sichtbaren Zeile im Fenster (beim Speichern)
  ' 19 :        Nummer der Cursorzeile (beim Speichern)
  ' 20-35 :     Zeiger auf die Adressentabelle der 16 Variablengruppen
  '             (wenn Programm in den Hauptspeicher geladen wurde).
  ' 36 :        Zeiger auf Anfang der Variablentabelle
  '             = Ende der Adresstabelle
  ' 37 :        Zeiger hinter Variablentabelle auf ??-Bereich
  ' 38 :        Zeiger hinter ?? Bereich
  '
  ' In der Adressentabelle ist fÅr jede Variable eine Adresse reserviert.
  ' Damit kann die Anzahl der Variablen jedes Typs durch die Differenz der
  ' Zeiger geteilt durch 4 ermittelt werden.
  '
  ' In der Variablentabelle sind reserviert:
  ' Typ         Bytes   EnthÑlt:
  ' ---         -----   --------
  ' #           8       Wert
  ' %           4       Wert
  ' &!|         2       Wert
  ' $           6       Deskriptor
  ' Felder      6       Deskriptor
  ' PROC,FUNC,@ -       -
  '
  ' Zeiger 38 wird anscheinend (wie 18,19) erst im Programm gesetzt.
  ' 38-37 ist in abgespeicherten Programmen in der Regel Null.
  '
  ' Variablennamen:
  ' ---------------
  ' Der Anfang jeder Gruppe lÑût sich aus 164+p1,p2,.. ermitteln,
  ' dann
  '
  ' Zeilencode allgemein:
  ' ---------------------
  '        2 Byte : LÑnge       immer gerade
  '        2 Byte : Art:        Nummer des Befehls (genau einer pro Zeile)
  '        n Byte : Inhalt      restlicher Code
  '        13,
  '        FÅllbyte (O)         optional, damit ZeilenlÑnge immer gerade ist.
  ' Abschluû mit '$46' (bei den meisten Zeilen) oder 13 (bei Zeilen vom
  ' String-Typ, z.B. DATA und REM-Zeilen)
  ' Achtung:
  ' Auf die letzte Zeile des Listings folgt immer noch eine 4-Byte-Zeile
  ' mit  0,4,0,180   (d.h. 0,180 = ENDE DES LISTINGS)
  ' MindestlÑnge einer Zeile: 6 Bytes. (LÑnge + Art + $46 + FÅllbyte)
  ' Ausnahme: Ende-Zeile mit LÑnge 4.
  '
  ' Die LÑnge einer GFA-Datei ist IMMER GERADE!
  ' Offsetpointer sind            IMMER GERADE!
  ' ZeilenlÑngen sind             IMMER GERADE!
  ' ----------------------------------------
  ' Alle Befehlsnummern sind DURCH 4 TEILBAR!!
  '
  ' Ende einer Befehlszeile immer mit 'F' ($46), dahinter optionales FÅllbyte (oFB)
  ' Wenn hier noch nicht das Zeilenende erreicht ist, enthÑlt das
  ' nÑchste Byte die Anzahl der Trennblanks zum Zeilenendkommentar.
  ' Danach folgt dieser direkt, abgeschlossen durch CR ('D',13) + optionales FÅllbyte
  '
  ' Befehle mit EinrÅckungsverÑnderung
  ' IF FOR DO WHILE REPEAT PROC FUNC SELECT             ->  INC depth&
  ' ENDIF NEXT LOOP UNTIL WEND RETURN ENDFUNC ENDSELECT ->  DEC depth&
  ' ELSE IF, ELSE, CASE, DEFAULT                        ->  PRED(depth&)
  '
  ' Bei Konstanten: 1- und 2-Byte-Codes werden dazu verwendet,
  ' sie an einer geraden Adresse beginnen zu lassen.
  '
  ' Bezeichnungen:
  ' * Eine Schwester eines Types ist der zu einem Variablentyp parallele
  '   Feldvariablentyp (z.B. Schwester von TYPE(*x|) ist TYPE(*x|()))
  ' * DEFINITION: Hat eine Variable des Typs x keine Schwester, so ist diese
  '   Variable eine Feldvariable.
  '
  SELECT rcmd&
  CASE 76,80,84,88,92,96,100,104,108,112,116,120        ! FOR
    ADD a&,2
  CASE 24,216,240,244,248,304,308,312,316,320,324,328,332,336,340,344,348
    ADD a&,2
  CASE 640,644,648,652,656,660,664,668,672,676,680,684,688,692,696,700
    ADD a&,2
  CASE 704,708,712,716,720,724,728,732        ! ADD x#, / ADD x%, / ADD x&,
    '                                         | ADD x|, / ADD x#( / ADD x%(
    '                                         | ADD x&( / ADD x|(
    ADD a&,2
  CASE 736,740,744,748,752,756,760,764        ! SUB x#, / SUB x%, / SUB x&,
    '                                         | SUB x|, / SUB x#( / SUB x%(
    '                                         | SUB x&( / SUB x|(
    ADD a&,2
  CASE 768,772,776,780,784,788,792,796        ! MUL x#, / MUL x%, / MUL x&,
    '                                         | MUL x|, / MUL x#( / MUL x%(
    '                                         | MUL x&( / MUL x|(
    ADD a&,2
  CASE 800,804,808,812,816,820,824,828        ! DIV x#, / DIV x%, / DIV x&,
    '                                         | DIV x|, / DIV x#( / DIV x%,
    '                                         | DIV x&( / DIV x|(
    ADD a&,2
  CASE 256,260,264,268,272,276,280,284,288,292,296,300  ! 256 to 300
    '                                         ! LET x#= / LET x$= / LET x%=
    '                                         ! LET x!= / LET x&= / LET x|=
    '                                         ! LET x#( / LET x$( / LET x%(
    '                                         ! LET x!( / LET x&( / LET x|(
    ADD a&,2
  CASE 4,12,16,20,32,48,56,60,64,172,176,196,200,204,208,220,224
    '                                         | UNTIL (12) / EXIT IF (172,220)
    '                                         | DO WHILE (196) / DO UNTIL (200)
    '                                         | LOOP WHILE (204) / LOOP (4)
    '                                         | LOOP UNTIL (208) / IF (32)
    '                                         | ELSE IF (32) / ELSE (56)
    '                                         | SELECT (48) / CASE (224)
    '                                         | WHILE (16) / WEND (20)
    '                                         | DEFAULT (60) / SELECT (176)
    ADD a&,4
  CASE 124,128,132,136,140,144,148,152,156,160,164,168          ! NEXT
    ADD a&,6
  ENDSELECT
  '
RETURN
> PROCEDURE history
  ' --------+----------------------------------------------------------+--------
  ' History |#           |  | +--- +-\  /ˇ\ | /ˇ\ \ |                 #| yrotsiH
  ' --------+#           \  / +-   | /  \-\ | | | |\|                 #+--------
  '  #########            \/  +--- | \  \_/ | \_/ | \                 #########
  ' ------------------v------------------------------------------------------\
  ' Version           | Datum                                                 \
  ' ------------------^--------------------------------------------------------\
  ' 0.00‡               22.08.1996                                             |
  ' * Erste Version fertig! Kann den Hauptbefehl, Dezimalkonstanten mit        |
  '   8 Bytes an gerader Adresse (also auch nicht CASE) und Stringkonstanten   |
  '   (Nicht im CASE-Zweig) tokenisieren.                                      |
  ' --------------------------------------------------------------------------<
  ' 0.00‡ PL 0          04.09.1996                                             |
  ' - gf4pt_putkonst(), gf4pt_putreal(), gf4pt_put4konst(): Neu. Schreiben     |
  '   tokenisierte Konstanten. gf4pt_putkonst schreibt numerische              |
  '   Konstanten im 8-Byte Format (Beachtet nun ungerade/gerade),              |
  '   gf4pt_putreal() schreibt eine Realkonstante (Erforderlich, da            |
  '   zwischen Tokencodes fÅr gerade + ungerade noch Stringkonstanten-         |
  '   code). gf4pt_put4konst() schreibt 4-Byte Konstante (Beachtet auch        |
  '   gerade/ungerade) (CASE).                                                 |
  ' - Kann nun auch Oktal, BinÑr und Hexkonstanten, an gerader und ungerader   |
  '   Adresse und Dezimalkonstanten endlich auch an ungeraden Adressen         |
  '   tokenisieren                                                             |
  ' - Endbyte wird jetzt angehÑngt ("F") und gegebenenfalls die LÑnge          |
  '   begradigt                                                                |
  ' - BinÑr, Oktal, Hex und Stringkonstanten nun auch in CASE-Zweigen          |
  '   (latÅrlich mit gerade / ungerade Entscheidung)                           |
  ' - Tokens werden jetzt in der Reihenfolge der lÑnge tokenisiert, somit      |
  '   gibt es keine Befehls-Konflikte mehr                                     |
  ' - gf4pt_getstr(), gf4pt_getnum(): Neu, regeln String- und Zahlenlesen      |
  '   statt der alten spezivischen Regeln (LÑngenoptimierung, kein Zeitverlust)|
  ' --------------------------------------------------------------------------<
  ' 0.00‡ PL 1          07.09.1996                                             |
  ' - Kann nun auch die meisten Funktionstokens tokenisieren.                  |
  ' - Funktions-tokens und Subfunktions-Tokens jetzt anders organisiert.       |
  '   Åber DATA Zeilen, jetzt auch nach LÑnge sortiert.                        |
  ' - gf4tp_readdata(): Neu. Leist eine Reihe von Tokens ein, LÑngenoptimierung|
  '   ohne Zeitverlust.                                                        |
  ' - gf4pt_getstr(), gf4pt_getnum(): Bearbeitungs-Position wird jetzt         |
  '   korregiert. Dadurch kînnen auch mehrere Befehlsteile hintereinander      |
  '   korrekt tokenisiert werden.                                              |
  ' - gf4pt_makevar(), gf4pt_whaeder(): Neu. Erzeugen Haeder und schreiben     |
  '   ihn                                                                      |
  ' - gf4pt_tokenizer(): Neu. Erzeugt aus einem ASCII-Feld ein token-Feld und  |
  '   speichert diese in GFA-Datei.                                            |
  ' - gf4pt_debug(), gf4pt_output(): Neu. Regeln User/Debug-Ausgabe            |
  ' --------------------------------------------------------------------------<
  ' 0.00‡ PL2           14.09.1996                                             |
  ' - gf4pt_makevar(): Fataler Fehler beseitigt: Es werden 16 Namengruppen     |
  '   statt 12 Variablengruppen durchgangen.                                   |
  ' - gf4pt_tok$(): Es wurde gerade umgekehrt bei gerader ZeilenlÑnge ein      |
  '   FÅllbyte angehÑngt.                                                      |
  ' - gf4pt_makevar(): Erster Var-Zeiger zeigt jetzt auf Listingende und       |
  '   nicht das nÑchste Byte                                                   |
  ' --------------------------------------------------------------------------<
  ' 0.00‡ PL3           20.09.1996                                             |
  ' - gf4pt_tok$(): Kann nun auch einfache Variablen tokenisieren (inkl. neue) |
  '   allerdings noch keine Felder                                             |
  ' - gf4pt_makevar(): VAR-RÅckgabewert len% war auch als LOCAL definiert.     |
  '   bisher nur nicht tragisch, da ohne Variablen die LÑnge sowieso NULL war  |
  ' - gf4pt_makevar(): Es wird jetzt nicht mehr 16 Byte auf die Adresse des    |
  '   angeforderten Speichers addiert, sondern auf die LÑnge des Anzufor-      |
  '   dernden Speichers. Viel auf, da sonst bei LÑnge >0 HINTER diesen         |
  '   Speicherblock geschrieben wurde, was einen totalabsturtz zur Folge hatte |
  ' - gf4pt_makevar(): Reservierungsfehler von >-1 in >0 umgewandelt, da       |
  '   Malloc bei zuwenig speicher NULL und nicht -1 liefert.                   |
  ' - gf4pt_makevar(): Verwechslung var$ <> var$(i&,j&) beseitigt.             |
  ' --------------------------------------------------------------------------<
  ' 0.00‡ PL4           22.09.1996                                             |
  ' - gf4pt_makevar(): GFA-internen Fehler umgangen (Hatte ebenfalls Total-    |
  '   Absturz zur Folge - Siehe __ERROR.GFA zum reprovozieren).                |
  ' - gf4pt_makevar(): Fehler beseitigt: Es muûte auf UNGERADE (ODD), nicht    |
  '   auf GERADE (EVEN) getestet werden. Setzte FÅllbyte natÅrlich dann immer  |
  '   im Falschen Falle. Hatte allerdings erst Auswirkungen, als die Variablen |
  '   aktiviert wurden.                                                        |
  ' - gf4pt_makevar(): Es wurde bei der ListinglÑnge vergessen noch die        |
  '   LÑnge des Variablenbereiches hinzuzuzÑhlen. Ebenfalls erst bei           |
  '   Aktivierung der Variablen aufgefallen.                                   |
  ' - gf4pt_makevar(): Ich hatte da noch irendwie falsch im GedÑchtnis, daû    |
  '   die VariablenlÑngen inklusive den LÑngenbyte gespeichert sind, sind      |
  '   sie aber nicht (Filevergleich zeigte es)                                 |
  ' - gf4pt_tok$(): Bei den Variablen wird nun bei NULL, nicht bei 1 zu zÑhlen |
  '   begonnen. Erstes vom Interpreter ladbares erzeugte GFA-Datei mit         |
  '   Variablen!                                                               |
  ' --------------------------------------------------------------------------<
  ' 0.00‡ PL5         02.10.1996                                               |
  ' - gf4pt_tok$(): Fehler korregiert: Bei Variablen, die nicht vom            |
  '   Standarttyp waren, wurde vergessen, zur weiteren Tokenisierung           |
  '   das Postfix zu Åberspringen                                              |
  ' - gf4pt_tok$(): Kann nun auch Feld-Variablen tokenisieren.                 |
  ' - gf4ed_init: Erstellt nun noch eine Umrechnungstabelle zur schnelleren    |
  '   Konvertierung von Variablen in Feldvariable.                             |
  ' - gf4pt_fill(), gf4pt_putkonst(), gf4pt_putreal(), gf4pt_put4konst():      |
  '   Schwerer Bug beseitigt: Es wird jetzt nicht mehr anhand der Position     |
  '   im ASCII-String versucht, die LÑnge des Token-Strings rauszufinden       |
  '   (Welch ein Quatsch!!!). Hatte zur Folge, daû, wenn die Teilbarkeit der   |
  '   LÑnge des Token-Strings anders ans die der Position im ASCII-String      |
  '   war, falscher Token-Code produziert wurde (Im zusammenhang mit Gerade/   |
  '   ungerade und FÅllbytes)                                                  |
  ' - gf4ed_init: Oh Gott, wenn ich weiter solche Bugs liefere, kann ich       |
  '   einpacken; da hatte ich doch tatsÑchlich die TYPE-Reihenfolge falsch     |
  '   angegebent (Bei den LÑngen der Variableninhalte) _UND_ nur 15 StÅck      |
  '   Åberhaupt hingeschrieben (Es sind ja 16 Typen). Er nahm das 16. aus      |
  '   gf4pt_stoken (Oh nooo!). Wie konnte ich nur so einen Schrott             |
  '   programmieren, der auch noch annÑhernd lief?                             |
  ' - gf4ed_init, gf4ed_stoken: Konstanten von gf4ed_init nach gf4ed_stoken    |
  '   verlegt.                                                                 |
  ' --------------------------------------------------------------------------<
  ' 0.00‡ PL6           14.10.1996                                             |
  ' - gf4pt_getsuffix(): Neu. Ermittelt Variablentyp aus evtl. folgendem       |
  '   Suffix (Verlegt aus gf4pt_tok$()).                                       |
  ' - gf4pt_getspecial(): Neu. Regelt auf Befehlstokens folgende AnhÑngsel     |
  '   (Wie z.B. Bei ADD, SUB, FOR, etc.)                                       |
  ' --------------------------------------------------------------------------<
  ' 0.00‡ PL7           15.10.1996                                             |
  ' - gf4tp_tok$(): Es wird jetzt als ZeilenendfÅllbyte ein "F" statt einem    |
  '   NULL-Byte verwendet. Das tritt bei original-GFA-Dateien îfter auf        |
  '   (Nur zum Vergleich zweier Dateien, hat eigendlich keine Auswirkung       |
RETURN
' ++!TP
